import streamlit as st
from typing import List, Optional
from pydantic import BaseModel, Field
from urllib.parse import quote, unquote
from repository.database import get_connection
import warnings

# –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
warnings.filterwarnings("ignore", category=DeprecationWarning)

class Template(BaseModel):
    template_id: int
    name: str
    description: str = Field(default="")
    markdown_instructions: str = Field(default="")
    is_required: bool = True
    processing_days: int = 1
    order_position: int = 1

def get_all_templates() -> List[Template]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    conn = get_connection()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT 
                    template_id, 
                    name, 
                    COALESCE(description, '') as description,
                    COALESCE(markdown_instructions, '') as markdown_instructions,
                    is_required, 
                    processing_days, 
                    order_position 
                FROM hr.document_template 
                ORDER BY order_position
            """)
            return [Template.model_validate(dict(zip(
                ['template_id', 'name', 'description', 'markdown_instructions',
                 'is_required', 'processing_days', 'order_position'], row)))
                for row in cur.fetchall()]
    finally:
        conn.close()

def show_template(template: Template):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω –≤ Streamlit"""
    st.header(template.name)
    st.subheader("–û–ø–∏—Å–∞–Ω–∏–µ")
    st.write(template.description if template.description else "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
    st.subheader("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é")
    st.markdown(template.markdown_instructions if template.markdown_instructions else "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    st.divider()
    cols = st.columns(3)
    cols[0].metric("–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π", "‚úÖ –î–∞" if template.is_required else "‚ùå –ù–µ—Ç")
    cols[1].metric("–°—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏", f"{template.processing_days} –¥–Ω–µ–π")
    cols[2].metric("–ü–æ–∑–∏—Ü–∏—è –≤ —Å–ø–∏—Å–∫–µ", template.order_position)

def main():
    st.set_page_config(
        page_title="–ë–∞–∑–∞ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ HR",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    st.sidebar.title("üìÇ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏")
    
    try:
        templates = get_all_templates()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL
        requested_doc = unquote(st.query_params.get("doc", "")) if "doc" in st.query_params else None
        
        # –ù–∞—Ö–æ–¥–∏–º —à–∞–±–ª–æ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–∑ URL
        selected_template = next((t for t in templates if t.name == requested_doc), None) if requested_doc else None
        
        # –í—ã–±–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Å–∞–π–¥–±–∞—Ä–µ
        selected_name = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
            options=[t.name for t in templates],
            index=0 if not selected_template else [t.name for t in templates].index(selected_template.name)
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º URL –ø—Ä–∏ –≤—ã–±–æ—Ä–µ
        if selected_name:
            st.query_params["doc"] = quote(selected_name)
            selected_template = next((t for t in templates if t.name == selected_name), None)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω
        if not templates:
            st.info("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.")
        elif selected_template:
            show_template(selected_template)
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()