import streamlit as st
from typing import List, Optional
from pydantic import BaseModel, Field
from repository.database import get_connection
import urllib.parse

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ë–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- –ú–æ–¥–µ–ª–∏ ---
class Template(BaseModel):
    template_id: int
    name: str
    description: str = Field(default="")
    markdown_instructions: str = Field(default="")  # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    is_required: bool = True
    order_position: int = 1

    @classmethod
    def from_db_row(cls, row):
        """–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Template –∏–∑ —Å—Ç—Ä–æ–∫–∏ –ë–î —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NULL –∑–Ω–∞—á–µ–Ω–∏–π"""
        return cls(
            template_id=row[0],
            name=row[1],
            description=row[2] if row[2] is not None else "",
            markdown_instructions=row[3] if row[3] is not None else "",
            is_required=row[4],
            order_position=row[5]
        )

# --- –§—É–Ω–∫—Ü–∏–∏ –ë–î ---
def get_all_templates() -> List[Template]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NULL –∑–Ω–∞—á–µ–Ω–∏–π"""
    conn = get_connection()
    try:
        with conn.cursor() as cur:
            cur.execute("""
                SELECT template_id, name, description, 
                       markdown_instructions, is_required, order_position
                FROM hr.document_template
                ORDER BY order_position
            """)
            return [Template.from_db_row(row) for row in cur.fetchall()]
    finally:
        conn.close()

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
def show_document(template: Template):
    st.header(template.name)
    st.write(template.description or "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    st.markdown(template.markdown_instructions or "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞")

def get_current_url() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π URL –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    if 'current_url' not in st.session_state:
        # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        st.session_state.current_url = "http://localhost:8502"
    return st.session_state.current_url

def update_url(doc_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º doc"""
    base_url = get_current_url().split('?')[0]
    encoded_name = urllib.parse.quote(doc_name.replace(' ', '_'))
    return f"{base_url}?doc={encoded_name}"

def main():
    try:
        templates = get_all_templates()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ URL
        query_params = st.query_params
        current_doc = query_params.get("doc", [None])[0]
        if current_doc:
            current_doc = current_doc.replace('_', ' ')
        
        # –°–∞–π–¥–±–∞—Ä —Å –≤—ã–±–æ—Ä–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞
        st.sidebar.title("üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã")
        selected_doc = st.sidebar.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç",
            options=[t.name for t in templates],
            index=[t.name for t in templates].index(current_doc) 
            if current_doc in [t.name for t in templates] else 0
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º URL –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
        if 'last_selected' not in st.session_state or st.session_state.last_selected != selected_doc:
            st.session_state.last_selected = selected_doc
            st.query_params["doc"] = selected_doc.replace(' ', '_')
            
            # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            if st.sidebar.button("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É"):
                st.sidebar.success("–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        selected_template = next(t for t in templates if t.name == selected_doc)
        show_document(selected_template)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()