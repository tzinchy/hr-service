import streamlit as st
import pandas as pd
import textwrap
import logging
import google.generativeai as genai
from repository.database import get_connection, get_minio_client
from frontend_auth.auth import check_auth, get_current_user_data
from service.email_service import send_email, send_telegram_notification, send_invitation_email
from repository.strml_repository import add_candidate_to_db
from core.config import GEMINI_API_KEY

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
st.set_page_config(layout="wide", page_title="HR Portal - –ö–∞–Ω–¥–∏–¥–∞—Ç—ã", page_icon="üë•")
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
ADMIN_ROLE_ID = 1 
# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
DOCUMENT_STATUSES = {
    1: ("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω", "‚ùå", "#FF5252"),
    2: ("–ó–∞–∫–∞–∑–∞–Ω", "üõí", "#FFD740"),
    3: ("–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", "‚è≥", "#64B5F6"),
    4: ("–ü—Ä–æ–≤–µ—Ä–µ–Ω", "‚úÖ", "#4CAF50"),
    5: ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ", "üîÑ", "#FF9800")
}

CANDIDATE_STATUSES = {
    2: ("–ü—Ä–∏–≥–ª–∞—à–µ–Ω", "‚úâÔ∏è"),
    3: ("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "üìù"),
    5: ("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "üîç"),
    7: ("–ü—Ä–∏–Ω—è—Ç", "‚úÖ"),
    8: ("–û—Ç–∫–ª–æ–Ω–µ–Ω", "‚ùå")
}

FINAL_STATUSES = [7, 8]  # –°—Ç–∞—Ç—É—Å—ã, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã

ALLOWED_DOCUMENT_STATUS_CHANGES = {
    3: [4, 5]
}

ALLOWED_CANDIDATE_STATUS_CHANGES = {
    5: [7, 8]  # –ò–∑ "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ" –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ "–ü—Ä–∏–Ω—è—Ç" –∏–ª–∏ "–û—Ç–∫–ª–æ–Ω–µ–Ω"
}

STATUS_DESCRIPTIONS = {
    7: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –æ—Ç–±–æ—Ä –∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É.",
    8: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ."
}

CANDIDATE_ANALYSIS_PROMPT = "–í—ã - HR-—ç–∫—Å–ø–µ—Ä—Ç. –ö—Ä–∞—Ç–∫–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI ---
genai.configure(api_key=GEMINI_API_KEY)
ai_model = genai.GenerativeModel("gemini-1.5-flash")

# --- –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def get_candidate_statuses():
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT status_id, name FROM hr.candidate_status ORDER BY status_id")
            return cursor.fetchall()

def get_candidates_list(tutor_uuid, is_admin, status_filter=None, search_query=None):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            params = []
            
            base_select = """
                SELECT 
                    c.candidate_uuid, c.first_name, c.last_name, c.email,
                    cs.status_id, cs.name as status, c.notes as candidate_notes,
                    COUNT(d.document_id) as total_docs,
                    SUM(CASE WHEN d.status_id = 1 THEN 1 ELSE 0 END) as status_1,
                    SUM(CASE WHEN d.status_id = 2 THEN 1 ELSE 0 END) as status_2,
                    SUM(CASE WHEN d.status_id = 3 THEN 1 ELSE 0 END) as status_3,
                    SUM(CASE WHEN d.status_id = 4 THEN 1 ELSE 0 END) as status_4,
                    SUM(CASE WHEN d.status_id = 5 THEN 1 ELSE 0 END) as status_5
                FROM hr.candidate c
                JOIN hr.candidate_status cs ON c.status_id = cs.status_id
                LEFT JOIN hr.candidate_document d ON c.candidate_uuid = d.candidate_id
                WHERE 1=1
            """

            if not is_admin:
                base_select += " AND c.tutor_uuid = %s"
                params.append(tutor_uuid)

            if status_filter:
                base_select += " AND cs.status_id = %s"
                params.append(status_filter)

            if search_query:
                base_select += " AND (LOWER(c.first_name) LIKE %s OR LOWER(c.last_name) LIKE %s)"
                params.extend([f"%{search_query.lower()}%", f"%{search_query.lower()}%"])
            
            base_select += """
                GROUP BY c.candidate_uuid, c.first_name, c.last_name, c.email, cs.status_id, cs.name, c.notes
                ORDER BY c.last_name, c.first_name
            """

            cursor.execute(base_select, params)
            return pd.DataFrame(cursor.fetchall(), columns=[desc[0] for desc in cursor.description])


def get_candidate_documents(candidate_uuid):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT 
                    d.document_id, t.name as document_type, d.s3_bucket, d.s3_key,
                    d.file_size, d.content_type, d.submitted_at, d.status_id, d.notes as document_notes
                FROM hr.candidate_document d
                JOIN hr.document_template t ON d.template_id = t.template_id
                WHERE d.candidate_id = %s
                ORDER BY t.order_position
            """, (candidate_uuid,))
            return pd.DataFrame(cursor.fetchall(), columns=[desc[0] for desc in cursor.description])

def update_document_status(document_id, new_status_id):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                UPDATE hr.candidate_document SET status_id = %s WHERE document_id = %s
            """, (new_status_id, document_id))
            conn.commit()

def update_candidate_status(candidate_uuid, new_status_id):
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            cursor.execute("""
                SELECT first_name, last_name, email, status_id, telegram_chat_id
                FROM hr.candidate 
                WHERE candidate_uuid = %s
            """, (candidate_uuid,))
            candidate_data = cursor.fetchone()
            
            if not candidate_data:
                raise ValueError("–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            current_status = candidate_data[3]
            if current_status in FINAL_STATUSES:
                raise ValueError("–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            cursor.execute("""
                UPDATE hr.candidate SET status_id = %s WHERE candidate_uuid = %s
            """, (new_status_id, candidate_uuid))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
            if new_status_id in FINAL_STATUSES:
                send_status_notifications(
                    first_name=candidate_data[0],
                    last_name=candidate_data[1],
                    email=candidate_data[2],
                    telegram_chat_id=candidate_data[4],
                    status_id=new_status_id
                )
            
            conn.commit()

def send_status_notifications(first_name, last_name, email, telegram_chat_id, status_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É –∏ –≤ Telegram"""
    status_name, status_icon = CANDIDATE_STATUSES[status_id]
    status_desc = STATUS_DESCRIPTIONS[status_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""
    –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {first_name} {last_name},
    
    –í–∞—à —Å—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_icon} {status_name}
    
    {status_desc}
    """
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É
    try:
        send_email(
            to_email=email,
            subject=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: {status_name}",
            message=message
        )
        logger.info(f"Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    if telegram_chat_id:
        try:
            send_telegram_notification(
                chat_id=telegram_chat_id,
                message=message
            )
            logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chat_id {telegram_chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {str(e)}")

def update_notes(table, id_field, id_value, notes):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(f"""
                UPDATE {table} SET notes = %s WHERE {id_field} = %s
            """, (notes, id_value))
            conn.commit()

def download_from_minio(bucket, key):
    try:
        if not bucket or not key:
            return None
        minio_client = get_minio_client()
        response = minio_client.get_object(bucket, key)
        file_data = response.read()
        response.close()
        return file_data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return None

# --- AI –§—É–Ω–∫—Ü–∏–∏ ---
def generate_compact_analysis(candidate, documents):
    try:
        docs_summary = {
            "completed": len(documents[documents['status_id'] == 4]),
            "pending": len(documents[documents['status_id'].isin([3, 5])]),
            "missing": len(documents[documents['status_id'].isin([1, 2])])
        }
        
        prompt = f"""
        –ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate['first_name']} {candidate['last_name']}
        –°—Ç–∞—Ç—É—Å: {candidate['status']}
        –ó–∞–º–µ—Ç–∫–∏: {textwrap.shorten(candidate.get('candidate_notes', '–Ω–µ—Ç'), width=100)}
        
        –î–æ–∫—É–º–µ–Ω—Ç—ã:
        - ‚úÖ –ì–æ—Ç–æ–≤–æ: {docs_summary['completed']}
        - üîÑ –í —Ä–∞–±–æ—Ç–µ: {docs_summary['pending']}
        - ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {docs_summary['missing']}
        
        {CANDIDATE_ANALYSIS_PROMPT}
        """
        
        response = ai_model.generate_content(prompt)
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑"

# --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
def show_status_badges(status_counts):
    cols = st.columns(len(DOCUMENT_STATUSES))
    for idx, (status_id, (name, icon, color)) in enumerate(DOCUMENT_STATUSES.items()):
        with cols[idx]:
            count = status_counts.get(f"status_{status_id}", 0)
            st.markdown(
                f'<div style="background-color:{color}20; border-radius:6px; padding:6px; '
                f'text-align:center; border-left:3px solid {color}; margin:2px;">'
                f'<div style="font-size:14px;">{icon} {count}</div>'
                f'<div style="font-size:11px;">{name}</div></div>',
                unsafe_allow_html=True
            )

def show_ai_analysis_popup(candidate, documents):
    with st.popover("üîç AI –ê–Ω–∞–ª–∏–∑", use_container_width=True):
        st.markdown(f"### {candidate['first_name']} {candidate['last_name']}")
        
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
            analysis = generate_compact_analysis(candidate, documents)
        
        st.markdown(f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:**\n\n{analysis}")
        
        cols = st.columns(3)
        with cols[0]:
            st.metric("‚úÖ –ì–æ—Ç–æ–≤–æ", len(documents[documents['status_id'] == 4]))
        with cols[1]:
            st.metric("üîÑ –í —Ä–∞–±–æ—Ç–µ", len(documents[documents['status_id'].isin([3, 5])]))
        with cols[2]:
            st.metric("üìã –í—Å–µ–≥–æ", len(documents))

def show_candidate_documents(candidate):
    st.subheader(f"{candidate['first_name']} {candidate['last_name']}")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    current_status_id = candidate['status_id']
    current_status_name, current_status_icon = CANDIDATE_STATUSES.get(current_status_id, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "‚ùì"))
    
    cols = st.columns([3, 1])
    with cols[0]:
        st.markdown(f"### –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status_icon} {current_status_name}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    user_data = get_current_user_data()
    is_admin = user_data and 1 in user_data.get('roles_ids', [])
    can_change_status = (
        is_admin and 
        current_status_id in ALLOWED_CANDIDATE_STATUS_CHANGES and
        current_status_id not in FINAL_STATUSES
    )
    
    # –ö–Ω–æ–ø–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –Ω–µ—Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤)
    if can_change_status:
        with cols[1]:
            with st.popover("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", help="–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"):
                new_status_name = st.selectbox(
                    "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å",
                    options=[CANDIDATE_STATUSES[s][0] for s in ALLOWED_CANDIDATE_STATUS_CHANGES[current_status_id]],
                    key=f"status_select_{candidate['candidate_uuid']}"
                )
                
                if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", key=f"confirm_status_{candidate['candidate_uuid']}"):
                    try:
                        new_status_id = [k for k, v in CANDIDATE_STATUSES.items() if v[0] == new_status_name][0]
                        update_candidate_status(candidate['candidate_uuid'], new_status_id)
                        st.success("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    with st.expander("üîç –§–∏–ª—å—Ç—Ä—ã", expanded=False):
        search_query = st.text_input(
            "–ü–æ–∏—Å–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º",
            key=f"search_{candidate['candidate_uuid']}"
        )
        status_filter = st.selectbox(
            "–°—Ç–∞—Ç—É—Å", 
            ["–í—Å–µ"] + [s[0] for s in DOCUMENT_STATUSES.values()],
            key=f"status_filter_{candidate['candidate_uuid']}"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    documents = get_candidate_documents(candidate['candidate_uuid'])
    if search_query:
        documents = documents[documents['document_type'].str.contains(search_query, case=False)]
    if status_filter != "–í—Å–µ":
        status_id = next(k for k, v in DOCUMENT_STATUSES.items() if v[0] == status_filter)
        documents = documents[documents['status_id'] == status_id]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    show_status_badges({
        f"status_{k}": len(documents[documents['status_id'] == k])
        for k in DOCUMENT_STATUSES
    })
    
    # –ö–Ω–æ–ø–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞
    if st.button("üí° –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑", key=f"ai_btn_{candidate['candidate_uuid']}", use_container_width=True):
        show_ai_analysis_popup(candidate, documents)
    
    # –ó–∞–º–µ—Ç–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    with st.expander("üìù –ó–∞–º–µ—Ç–∫–∏", expanded=False):
        notes = st.text_area(
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏",
            value=candidate.get('candidate_notes', ''),
            height=100,
            key=f"candidate_notes_{candidate['candidate_uuid']}",
            label_visibility="collapsed"
        )
        if st.button(
            "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
            key=f"save_notes_{candidate['candidate_uuid']}",
            use_container_width=True
        ):
            update_notes("hr.candidate", "candidate_uuid", candidate['candidate_uuid'], notes)
            st.rerun()
    
    # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    with st.container(height=500):
        for _, doc in documents.iterrows():
            with st.container(border=True):
                cols = st.columns([4, 1])
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                with cols[0]:
                    status = DOCUMENT_STATUSES[doc['status_id']]
                    st.markdown(f"**{doc['document_type']}**")
                    st.caption(f"üóìÔ∏è {doc.get('submitted_at', '–Ω–µ—Ç –¥–∞—Ç—ã')} | üì¶ {doc.get('file_size', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
                    st.markdown(f"{status[1]} {status[0]}")
                    
                    # –ó–∞–º–µ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    with st.expander("üìù –ó–∞–º–µ—Ç–∫–∏", expanded=False):
                        doc_notes = st.text_area(
                            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                            value=doc.get('document_notes', ''),
                            height=70,
                            key=f"doc_notes_{doc['document_id']}",
                            label_visibility="collapsed"
                        )
                        if st.button(
                            "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                            key=f"save_doc_{doc['document_id']}",
                            use_container_width=True
                        ):
                            update_notes("hr.candidate_document", "document_id", doc['document_id'], doc_notes)
                            st.rerun()
                
                # –î–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                with cols[1]:
                    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
                    if doc['status_id'] not in [1, 2] and doc['s3_key']:
                        if st.button(
                            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å",
                            key=f"dl_{doc['document_id']}",
                            use_container_width=True
                        ):
                            file_data = download_from_minio(doc['s3_bucket'], doc['s3_key'])
                            if file_data:
                                st.download_button(
                                    "–°–∫–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å",
                                    file_data,
                                    doc['s3_key'].split('/')[-1],
                                    doc['content_type'],
                                    key=f"dl_btn_{doc['document_id']}"
                                )
                    
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    if doc['status_id'] in ALLOWED_DOCUMENT_STATUS_CHANGES:
                        new_status = st.selectbox(
                            "–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å",
                            [DOCUMENT_STATUSES[s][0] for s in ALLOWED_DOCUMENT_STATUS_CHANGES[doc['status_id']]],
                            key=f"status_{doc['document_id']}",
                            label_visibility="collapsed"
                        )
                        if st.button(
                            "üîÑ –ü—Ä–∏–º–µ–Ω–∏—Ç—å",
                            key=f"update_{doc['document_id']}",
                            use_container_width=True
                        ):
                            new_id = next(k for k, v in DOCUMENT_STATUSES.items() if v[0] == new_status)
                            update_document_status(doc['document_id'], new_id)
                            st.rerun()

# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---
def candidates_page():
    st.title("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏")
    user_data = get_current_user_data()
    if not user_data:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", use_container_width=True):
        st.session_state['show_add_form'] = True
    
    if st.session_state.get('show_add_form', False):
        with st.form("add_form"):
            st.subheader("–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç")
            
            cols = st.columns(2)
            with cols[0]:
                first_name = st.text_input("–ò–º—è*")
            with cols[1]:
                last_name = st.text_input("–§–∞–º–∏–ª–∏—è*")
            
            email = st.text_input("Email*")
            sex = st.selectbox("–ü–æ–ª", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
            notes = st.text_area("–ó–∞–º–µ—Ç–∫–∏")
            
            cols = st.columns(2)
            with cols[0]:
                if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å", type="primary"):
                    if not first_name or not last_name or not email:
                        st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                    else:
                        try:
                            user_data = get_current_user_data()
                            candidate_uuid, code = add_candidate_to_db(
                                first_name=first_name,
                                last_name=last_name,
                                email=email,
                                sex=sex == "–ú—É–∂—Å–∫–æ–π",
                                tutor_id=user_data['user_uuid'],
                                notes=notes
                            )
                            send_invitation_email(email, code)
                            st.success("–ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
                            st.session_state['show_add_form'] = False
                            st.rerun()
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            
            with cols[1]:
                if st.form_submit_button("–û—Ç–º–µ–Ω–∞"):
                    st.session_state['show_add_form'] = False
                    st.rerun()
        return
    
    # –§–∏–ª—å—Ç—Ä—ã
    with st.expander("üîç –§–∏–ª—å—Ç—Ä—ã", expanded=False):
        cols = st.columns(2)
        with cols[0]:
            search = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏")
        with cols[1]:
            status = st.selectbox(
                "–°—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", 
                ["–í—Å–µ"] + [s for s in get_candidate_statuses()],
                format_func=lambda x: x[1] if x != "–í—Å–µ" else x
            )
    is_admin = ADMIN_ROLE_ID in user_data.get('roles_ids')
    tutor_uuid = user_data.get('user_uuid') if not is_admin else None
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    candidates = get_candidates_list(
        tutor_uuid=tutor_uuid,
        is_admin=is_admin,
        status_filter=status[0] if status != "–í—Å–µ" else None,
        search_query=search if search else None
    )

    if candidates.empty:
        st.info("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
    col1, col2 = st.columns([2, 1], gap="large")
    
    with col1:
        st.subheader("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        with st.container(height=600):
            for _, candidate in candidates.iterrows():
                with st.container(border=True):
                    st.markdown(f"### {candidate['last_name']} {candidate['first_name']}")
                    status_name, status_icon = CANDIDATE_STATUSES.get(candidate['status_id'], ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "‚ùì"))
                    st.caption(f"üìß {candidate['email']} | {status_icon} {status_name}")
                    
                    if candidate['total_docs'] > 0:
                        st.markdown("---")
                        show_status_badges({
                            f"status_{k}": candidate.get(f"status_{k}", 0)
                            for k in DOCUMENT_STATUSES
                        })
                    
                    if st.button(
                        "–û—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã",
                        key=f"open_{candidate['candidate_uuid']}",
                        use_container_width=True
                    ):
                        st.session_state['selected_candidate'] = candidate
                        st.rerun()
    
    with col2:
        if 'selected_candidate' in st.session_state:
            show_candidate_documents(st.session_state['selected_candidate'])
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
def main():
    if not check_auth():
        st.warning("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        return
    
    user_data = get_current_user_data()
    if not user_data:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    if not set(user_data.get('roles_ids', [])).intersection({1, 2, 3}):
        st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    candidates_page()

if __name__ == "__main__":
    main()