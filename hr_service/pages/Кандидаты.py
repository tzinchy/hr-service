import streamlit as st
import pandas as pd
from candidate.database import get_connection, get_minio_client
from frontend_auth.auth import check_auth, get_current_user_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide")

# –°—Ç–∞—Ç—É—Å—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
DOCUMENT_STATUSES = {
    1: ("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω", "‚ùå", "#FF5252"),
    2: ("–ó–∞–∫–∞–∑–∞–Ω", "üõí", "#FFD740"),
    3: ("–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", "‚è≥", "#64B5F6"),
    4: ("–ü—Ä–æ–≤–µ—Ä–µ–Ω", "‚úÖ", "#4CAF50"),
    5: ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ", "üîÑ", "#FF9800")
}

# –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–∏ —Å—Ç–∞—Ç—É—Å—ã –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å)
ALLOWED_STATUS_CHANGES = {
    3: [4, 5],  # "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏" -> "–ü—Ä–æ–≤–µ—Ä–µ–Ω" –∏–ª–∏ "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ"
    5: [3]      # "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ" -> "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"
}

# --- –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def get_candidates_list(status_filter=None):
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            base_query = """
                SELECT 
                    c.candidate_uuid, 
                    c.first_name, 
                    c.last_name, 
                    c.email,
                    cs.name as status,
                    cs.status_id as status_id,
                    COUNT(d.document_id) as total_docs,
                    SUM(CASE WHEN d.status_id = 1 THEN 1 ELSE 0 END) as status_1,
                    SUM(CASE WHEN d.status_id = 2 THEN 1 ELSE 0 END) as status_2,
                    SUM(CASE WHEN d.status_id = 3 THEN 1 ELSE 0 END) as status_3,
                    SUM(CASE WHEN d.status_id = 4 THEN 1 ELSE 0 END) as status_4,
                    SUM(CASE WHEN d.status_id = 5 THEN 1 ELSE 0 END) as status_5
                FROM hr.candidate c
                JOIN hr.candidate_status cs ON c.status_id = cs.status_id
                LEFT JOIN hr.candidate_document d ON c.candidate_uuid = d.candidate_id
            """
            
            if status_filter:
                base_query += f" WHERE cs.status_id = {status_filter}"
            
            base_query += """
                GROUP BY c.candidate_uuid, c.first_name, c.last_name, c.email, cs.name, cs.status_id
                ORDER BY c.last_name, c.first_name
            """
            
            cursor.execute(base_query)
            columns = [desc[0] for desc in cursor.description]
            return pd.DataFrame(cursor.fetchall(), columns=columns)

def get_candidate_documents(candidate_uuid):
    """–ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT 
                    d.document_id,
                    t.name as document_type,
                    d.s3_bucket,
                    d.s3_key,
                    d.file_size,
                    d.content_type,
                    d.submitted_at,
                    d.status_id
                FROM hr.candidate_document d
                JOIN hr.document_template t ON d.template_id = t.template_id
                WHERE d.candidate_id = %s
                ORDER BY t.order_position
            """, (candidate_uuid,))
            columns = [desc[0] for desc in cursor.description]
            return pd.DataFrame(cursor.fetchall(), columns=columns)

def update_document_status(document_id, new_status_id):
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                UPDATE hr.candidate_document
                SET status_id = %s
                WHERE document_id = %s
            """, (new_status_id, document_id))
            conn.commit()

def download_from_minio(bucket, key):
    """–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏–∑ MinIO"""
    try:
        if not bucket or not key:
            return None
            
        minio_client = get_minio_client()
        response = minio_client.get_object(bucket, key)
        file_data = response.read()
        response.close()
        return file_data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return None

# --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
def show_status_badges(status_counts):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –≤–∏–¥–µ –±–µ–π–¥–∂–µ–π"""
    cols = st.columns(len(DOCUMENT_STATUSES))
    for idx, (status_id, (status_name, icon, color)) in enumerate(DOCUMENT_STATUSES.items()):
        count = status_counts.get(f"status_{status_id}", 0)
        with cols[idx]:
            st.markdown(
                f'<div style="background-color:{color}20; border-radius:6px; padding:8px; text-align:center; border-left:3px solid {color}">'
                f'<div style="font-size:16px; display:flex; justify-content:center; align-items:center; gap:4px;">'
                f'{icon} <span>{count}</span>'
                '</div>'
                f'<div style="font-size:12px;">{status_name}</div>'
                '</div>',
                unsafe_allow_html=True
            )

def show_candidate_documents(candidate):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
    st.subheader(f"üìÇ –î–æ–∫—É–º–µ–Ω—Ç—ã: {candidate['last_name']} {candidate['first_name']}")
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    col1, col2 = st.columns(2)
    with col1:
        doc_search = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", key=f"search_{candidate['candidate_uuid']}")
    with col2:
        selected_status = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
            options=["–í—Å–µ"] + [status[0] for status in DOCUMENT_STATUSES.values()],
            key=f"status_filter_{candidate['candidate_uuid']}"
        )
    
    documents_df = get_candidate_documents(candidate['candidate_uuid'])
    if documents_df.empty:
        st.info("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        return
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    if doc_search:
        mask = documents_df['document_type'].str.contains(doc_search, case=False)
        documents_df = documents_df[mask]
    
    if selected_status != "–í—Å–µ":
        status_id = [k for k, v in DOCUMENT_STATUSES.items() if v[0] == selected_status][0]
        documents_df = documents_df[documents_df['status_id'] == status_id]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    status_counts = {f"status_{status_id}": len(documents_df[documents_df['status_id'] == status_id]) 
                    for status_id in DOCUMENT_STATUSES}
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    show_status_badges(status_counts)
    
    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    with st.container(height=500):  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        for _, doc in documents_df.iterrows():
            status_id = doc['status_id']
            status_name, status_icon, status_color = DOCUMENT_STATUSES.get(status_id, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "‚ùì", "#9E9E9E"))
            
            with st.container(border=True):
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
                cols = st.columns([4, 2])
                with cols[0]:
                    date_str = doc['submitted_at'].strftime('%d.%m.%Y') if pd.notna(doc['submitted_at']) else "–Ω–µ—Ç –¥–∞—Ç—ã"
                    file_size = f"{doc['file_size']/1024:.1f} KB" if pd.notna(doc['file_size']) else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    st.markdown(f"**{doc['document_type']}**")
                    st.caption(f"üóìÔ∏è {date_str} | üì¶ {file_size}")
                    st.markdown(f"{status_icon} **{status_name}**")
                
                # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
                with cols[1]:
                    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
                    if status_id not in [1, 2] and doc['s3_key']:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω" –∏ "–ó–∞–∫–∞–∑–∞–Ω"
                        if st.button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", 
                                   key=f"dl_btn_{doc['document_id']}",
                                   use_container_width=True):
                            file_data = download_from_minio(doc['s3_bucket'], doc['s3_key'])
                            if file_data:
                                file_name = doc['s3_key'].split('/')[-1]
                                st.download_button(
                                    label="–°–∫–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å",
                                    data=file_data,
                                    file_name=file_name,
                                    mime=doc['content_type'],
                                    key=f"dl_{doc['document_id']}"
                                )
                    
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤)
                    if status_id in ALLOWED_STATUS_CHANGES:
                        new_status_options = [DOCUMENT_STATUSES[status][0] for status in ALLOWED_STATUS_CHANGES[status_id]]
                        new_status_name = st.selectbox(
                            "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞:",
                            options=new_status_options,
                            key=f"status_select_{doc['document_id']}"
                        )
                        
                        if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ",
                                   key=f"confirm_{doc['document_id']}",
                                   type="primary"):
                            new_status_id = [k for k, v in DOCUMENT_STATUSES.items() if v[0] == new_status_name][0]
                            update_document_status(doc['document_id'], new_status_id)
                            st.rerun()

# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ---
def candidates_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏"""
    st.title("üë• –ö–∞–Ω–¥–∏–¥–∞—Ç—ã")
    
    # –§–∏–ª—å—Ç—Ä—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    filter_col1, filter_col2 = st.columns([3, 2])
    with filter_col1:
        search_query = st.text_input("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é")
    with filter_col2:
        status_filter = st.selectbox(
            "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
            options=["–í—Å–µ"] + [status for status in get_candidate_statuses()],
            format_func=lambda x: x[1] if x != "–í—Å–µ" else x,
            key="candidate_status_filter"
        )
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
    status_id_filter = status_filter[0] if status_filter != "–í—Å–µ" else None
    candidates_df = get_candidates_list(status_id_filter)
    
    if candidates_df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö")
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–º–µ–Ω–∏
    if search_query:
        mask = (candidates_df['first_name'].str.contains(search_query, case=False) | 
               candidates_df['last_name'].str.contains(search_query, case=False))
        candidates_df = candidates_df[mask]
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
    col_left, col_right = st.columns([2, 1], gap="large")
    
    with col_left:
        st.subheader("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç–æ–π –∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        with st.container(height=600):  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            for _, candidate in candidates_df.iterrows():
                with st.container(border=True):
                    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                    status_counts = {
                        f"status_{status_id}": candidate.get(f"status_{status_id}", 0)
                        for status_id in DOCUMENT_STATUSES
                    }
                    
                    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
                    st.markdown(f"### {candidate['last_name']} {candidate['first_name']}")
                    st.write(f"**–°—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:** {candidate['status']}")
                    st.write(f"**Email:** {candidate['email']}")
                    
                    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
                    if candidate['total_docs'] > 0:
                        st.markdown("---")
                        st.write("**–°—Ç–∞—Ç—É—Å—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:**")
                        show_status_badges(status_counts)
                    
                    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã", 
                               key=f"btn_{candidate['candidate_uuid']}",
                               use_container_width=True):
                        st.session_state['selected_candidate'] = candidate
    
    with col_right:
        # –ü—Ä–∞–≤—ã–π —Å–∞–π–¥–±–∞—Ä —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ —Å–∫—Ä–æ–ª–ª–æ–º
        if 'selected_candidate' in st.session_state:
            show_candidate_documents(st.session_state['selected_candidate'])
        else:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_candidate_statuses():
    """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT status_id, name FROM hr.candidate_status ORDER BY status_id")
            return cursor.fetchall()

# --- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ ---
def main():
    if not check_auth():
        st.warning("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        return
    
    user_data = get_current_user_data()
    if not user_data:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    if not set(user_data.get('roles_ids', [])).intersection({1, 2, 3}):
        st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    candidates_page()

if __name__ == "__main__":
    main()