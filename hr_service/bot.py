import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Location,
    BufferedInputFile
)
from datetime import datetime
from candidate.database import get_connection, get_minio_client
from core.config import settings
from candidate.tg_service import (
    is_user_authorized,
    process_bank_statement,
    save_message,
    create_required_documents,
    get_candidate_uuid_by_chat_id,
    save_location
)
import os
import tempfile
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AuthState(StatesGroup):
    waiting_for_code = State()
    waiting_for_privacy_accept = State()
    document_upload = State()
    waiting_for_bank_data = State()
    waiting_for_location = State()
    editing_profile = State()
    document_action = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.bot.TELEGRAM_TOKEN)
dp = Dispatcher()

DOCUMENT_STATUSES = {
    1: "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚ùå",
    2: "–ó–∞–∫–∞–∑–∞–Ω üõí",
    3: "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ‚è≥",
    4: "–ü—Ä–æ–≤–µ—Ä–µ–Ω ‚úÖ",
    5: "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑üîÑ"
}

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def get_main_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÅ –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã"), KeyboardButton(text="üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π")],
            [KeyboardButton(text="üó∫Ô∏è –ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è"), KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )

async def show_main_menu(message: Message, first_name: str = "", last_name: str = ""):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    greeting = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name} {last_name}!\n" if first_name else ""
    await message.answer(
        f"{greeting}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=await get_main_keyboard()
    )
    await save_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑–∞–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", True)

async def update_document_status(document_id: int, new_status: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    UPDATE hr.candidate_document
                    SET status_id = %s,
                        updated_at = NOW()
                    WHERE document_id = %s
                    RETURNING document_id, status_id
                """, (new_status, document_id))
                
                updated_doc = cursor.fetchone()
                
                if updated_doc:
                    cursor.execute("""
                        INSERT INTO hr.document_history (document_uuid, status_id, created_at)
                        VALUES (%s, %s, NOW())
                    """, (updated_doc[0], updated_doc[1]))
                    
                    conn.commit()
                    return True
        return False
    except Exception as e:
        logger.error(f"Error updating document status: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await save_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", False)
    await message.answer(
        "üîë –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, "
        "–∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ email:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AuthState.waiting_for_code)

@dp.message(AuthState.waiting_for_code, F.text)
async def process_invitation_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    code = message.text.strip().upper()
    chat_id = message.chat.id
    await save_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∫–æ–¥: {code}", False)

    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    """
                    SELECT candidate_uuid, first_name, last_name, agreement_accepted, status_id 
                    FROM hr.candidate 
                    WHERE invitation_code = %s
                    """,
                    (code,)
                )
                
                result = cursor.fetchone()
                
                if not result:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
                    return
                
                candidate_uuid, first_name, last_name, agreement_accepted, current_status = result
                
                cursor.execute(
                    """
                    UPDATE hr.candidate 
                    SET telegram_chat_id = %s
                    WHERE candidate_uuid = %s
                    """,
                    (chat_id, candidate_uuid)
                )
                
                if current_status == 2:
                    cursor.execute(
                        """
                        UPDATE hr.candidate
                        SET status_id = 3,
                            registered_at = NOW()
                        WHERE candidate_uuid = %s
                        """,
                        (candidate_uuid,)
                    )
                
                cursor.execute("""
                    INSERT INTO comm.telegram_chat (
                        chat_id, 
                        candidate_uuid,
                        chat_type,
                        created_at,
                        updated_at
                    ) VALUES (%s, %s, %s, %s, %s)
                    ON CONFLICT (chat_id) DO UPDATE
                    SET candidate_uuid = EXCLUDED.candidate_uuid,
                        updated_at = EXCLUDED.updated_at
                """, (
                    chat_id,
                    candidate_uuid,
                    'private',
                    datetime.now(),
                    datetime.now()
                ))
                
                conn.commit()
                
                if agreement_accepted:
                    await create_required_documents(candidate_uuid)
                    await show_main_menu(message, first_name, last_name)
                    await state.clear()
                else:
                    privacy_kb = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é",
                                callback_data="privacy_accept"
                            ),
                            InlineKeyboardButton(
                                text="‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å",
                                callback_data="privacy_decline"
                            )
                        ]
                    ])
                    
                    await message.answer(
                        "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...",
                        reply_markup=privacy_kb
                    )
                    await state.set_state(AuthState.waiting_for_privacy_accept)
                    await state.update_data(candidate_uuid=candidate_uuid)
                
                await save_message(
                    chat_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è",
                    True
                )
    except Exception as e:
        logger.error(f"Error during invitation code processing: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@dp.callback_query(AuthState.waiting_for_privacy_accept, F.data == "privacy_accept")
async def accept_privacy(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    chat_id = callback.message.chat.id
    data = await state.get_data()
    candidate_uuid = data['candidate_uuid']
    
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    UPDATE hr.candidate 
                    SET agreement_accepted = TRUE,
                        agreement_accepted_at = NOW()
                    WHERE candidate_uuid = %s
                    RETURNING first_name, last_name
                """, (candidate_uuid,))
                
                result = cursor.fetchone()
                if not result:
                    await callback.message.answer("‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    await state.clear()
                    return
                    
                first_name, last_name = result
                
                await create_required_documents(candidate_uuid)
                conn.commit()
                
                await callback.message.edit_text(
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ, {first_name}! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏."
                )
                
                await save_message(
                    chat_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} –ø—Ä–∏–Ω—è–ª –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                    True
                )
                
                await show_main_menu(callback.message, first_name, last_name)
                await state.clear()
                
    except Exception as e:
        logger.error(f"Error during privacy acceptance: {e}")
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.")

@dp.callback_query(AuthState.waiting_for_privacy_accept, F.data == "privacy_decline")
async def decline_privacy(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
    await callback.message.edit_text(
        "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. "
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è."
    )
    await state.clear()
    await save_message(callback.message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@dp.message(Command("docs"))
@dp.message(F.text == "üìÅ –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
async def cmd_docs(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /docs –∏ –∫–Ω–æ–ø–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    chat_id = message.chat.id
    await save_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã", False)
    
    if not await is_user_authorized(chat_id):
        await message.answer("üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return
    
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT c.candidate_uuid, c.first_name, c.last_name 
                    FROM hr.candidate c
                    WHERE c.telegram_chat_id = %s
                """, (chat_id,))
                
                candidate = cursor.fetchone()
                if not candidate:
                    await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                candidate_uuid, first_name, last_name = candidate
                
                cursor.execute("""
                    SELECT d.document_id, t.name, d.status_id, t.template_id
                    FROM hr.candidate_document d
                    JOIN hr.document_template t ON d.template_id = t.template_id
                    WHERE d.candidate_id = %s
                    ORDER BY t.order_position
                """, (candidate_uuid,))
                
                documents = cursor.fetchall()
                
                if not documents:
                    await create_required_documents(candidate_uuid)
                    cursor.execute("""
                        SELECT d.document_id, t.name, d.status_id, t.template_id
                        FROM hr.candidate_document d
                        JOIN hr.document_template t ON d.template_id = t.template_id
                        WHERE d.candidate_id = %s
                        ORDER BY t.order_position
                    """, (candidate_uuid,))
                    documents = cursor.fetchall()
                
                keyboard = []
                for doc in documents:
                    doc_id, doc_name, status_id, template_id = doc
                    status = DOCUMENT_STATUSES[status_id]
                    keyboard.append([KeyboardButton(text=f"{doc_name} {status}")])
                
                keyboard.append([KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
                
                doc_kb = ReplyKeyboardMarkup(
                    keyboard=keyboard,
                    resize_keyboard=True
                )
                
                docs_info = {doc[1]: {"id": doc[0], "template_id": doc[3], "status_id": doc[2]} for doc in documents}
                await state.update_data(docs_info=docs_info)
                
                response = f"üìÇ {first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:\n\n"
                for doc in documents:
                    doc_id, doc_name, status_id, _ = doc
                    status = DOCUMENT_STATUSES[status_id]
                    response += f"{doc_name}: {status}\n"
                
                await message.answer(response, reply_markup=doc_kb)
                await save_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", True)
    except Exception as e:
        logger.error(f"Error displaying documents: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.")

@dp.message(
    lambda message: message.text and any(
        doc_name in message.text 
        for doc_name in [
            "Excel —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Å—á–µ—Ç–∞–º–∏", "–°–ø—Ä–∞–≤–∫–∞ –æ —Å—É–¥–∏–º–æ—Å—Ç–∏", "–ü–æ–ª–∏—Å –û–ú–°", "–°–ù–ò–õ–°", 
            "–¢—Ä—É–¥–æ–≤–∞—è –∫–Ω–∏–∂–∫–∞", "–ü–∞—Å–ø–æ—Ä—Ç", "–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –±—Ä–∞–∫–µ/—Ä–∞–∑–≤–æ–¥–µ", 
            "–í–æ–µ–Ω–Ω—ã–π –±–∏–ª–µ—Ç/–ø—Ä–∏–ø–∏—Å–Ω–æ–µ", "–ò–ù–ù", "2-–ù–î–§–õ", "–°–ø—Ä–∞–≤–∫–∞ –∏–∑ –Ω–∞—Ä–∫–æ–¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∞",
            "–°–ø—Ä–∞–≤–∫–∞ –∏–∑ –ø—Å–∏—Ö–æ–¥–∏—Å–ø–∞–Ω—Å–µ—Ä–∞", "–û–±—â–∞—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞", 
            "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã"
        ]
    )
)
async def handle_document_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    chat_id = message.chat.id
    
    if not await is_user_authorized(chat_id):
        await message.answer("üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return
    
    data = await state.get_data()
    docs_info = data.get('docs_info', {})
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    doc_name = next((name for name in docs_info.keys() if name in message.text), None)
    
    if not doc_name:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /docs")
        return
    
    doc_info = docs_info[doc_name]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    buttons = []
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏
    buttons.append([KeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–∫–∞–∑–∞–Ω" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
    if doc_info["status_id"] == 1:
        buttons.append([KeyboardButton(text="üõí –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–π")])
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
    if doc_info["status_id"] in [3, 4, 5]:
        buttons.append([KeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")])
    
    buttons.append([KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")])
    
    action_kb = ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )
    
    await message.answer(
        f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: <b>{doc_name}</b>\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{DOCUMENT_STATUSES[doc_info['status_id']]}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=action_kb,
        parse_mode="HTML"
    )
    
    await state.set_state(AuthState.document_action)
    await state.update_data(selected_doc=doc_info, doc_name=doc_name)

@dp.message(AuthState.document_action, F.text == "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
async def request_document_upload(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    data = await state.get_data()
    doc_name = data.get('doc_name')
    
    if doc_name == "Excel —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Å—á–µ—Ç–∞–º–∏":
        await message.answer(
            "üìä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –≤—ã–ø–∏—Å–∫–∞–º–∏ –±–∞–Ω–∫–∞."
        )
        await state.set_state(AuthState.waiting_for_bank_data)
        return
    
    await message.answer(f"üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_name}")
    await state.set_state(AuthState.document_upload)

@dp.message(AuthState.document_action, F.text == "üõí –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–π")
async def mark_as_ordered(message: Message, state: FSMContext):
    """–û—Ç–º–µ—Ç–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∫–∞–∫ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–π"""
    data = await state.get_data()
    selected_doc = data.get('selected_doc')
    doc_name = data.get('doc_name')
    
    if not selected_doc:
        await message.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        await state.clear()
        return
    
    if await update_document_status(selected_doc['id'], 2):
        await message.answer(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{doc_name}' –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–π!")
        await cmd_docs(message, state)
    else:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

@dp.message(AuthState.document_action, F.text == "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
async def download_document(message: Message, state: FSMContext):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    data = await state.get_data()
    selected_doc = data.get('selected_doc')
    doc_name = data.get('doc_name')
    
    if not selected_doc:
        await message.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        await state.clear()
        return
    
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT s3_bucket, s3_key, content_type
                    FROM hr.candidate_document
                    WHERE document_id = %s
                """, (selected_doc['id'],))
                
                doc_data = cursor.fetchone()
                
                if not doc_data or not doc_data[0] or not doc_data[1]:
                    await message.answer("‚ö†Ô∏è –§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                bucket, key, content_type = doc_data
                minio_client = get_minio_client()
                
                try:
                    file_data = minio_client.get_object(bucket, key)
                    file_bytes = file_data.read()
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    extension = "bin"
                    if content_type:
                        if "pdf" in content_type:
                            extension = "pdf"
                        elif "image" in content_type:
                            extension = content_type.split("/")[-1]
                        elif "excel" in content_type or "spreadsheet" in content_type:
                            extension = "xlsx"
                        elif "word" in content_type:
                            extension = "docx"
                    
                    file_name = f"{doc_name.replace(' ', '_')}.{extension}"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await message.answer_document(
                        BufferedInputFile(
                            file_bytes,
                            filename=file_name
                        ),
                        caption=f"üìÑ {doc_name}"
                    )
                    
                    await save_message(
                        message.chat.id,
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞—á–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç: {doc_name}",
                        True
                    )
                    
                except Exception as e:
                    logger.error(f"Error downloading file from MinIO: {e}")
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.")
                
                finally:
                    if 'file_data' in locals():
                        file_data.close()
                        file_data.release_conn()
    
    except Exception as e:
        logger.error(f"Error in download_document: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")

@dp.message(AuthState.document_action, F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º")
async def back_to_documents(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    await state.clear()
    await cmd_docs(message, state)

@dp.message(AuthState.waiting_for_bank_data, F.document)
async def handle_bank_statement(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–∏—Å–∫–∏ –±–∞–Ω–∫–∞"""
    chat_id = message.chat.id
    document = message.document
    
    if not document.file_name.endswith(('.xlsx', '.xls')):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)")
        return
    
    candidate_uuid = await get_candidate_uuid_by_chat_id(chat_id)
    if not candidate_uuid:
        await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –≤—ã–ø–∏—Å–∫–∞–º–∏...")
    
    try:
        file = await bot.get_file(document.file_id)
        file_path = os.path.join(tempfile.gettempdir(), document.file_name)
        await bot.download_file(file.file_path, file_path)
        
        success, message_text = await process_bank_statement(file_path, candidate_uuid)
        os.remove(file_path)
        
        if success:
            await message.answer(f"‚úÖ {message_text}")
        else:
            await message.answer(f"‚ùå {message_text}")
        
        await state.clear()
        await cmd_docs(message, state)
    except Exception as e:
        logger.error(f"Error processing bank statement: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")
        await state.clear()

@dp.message(AuthState.document_upload, F.document)
async def handle_document_upload(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    chat_id = message.chat.id
    document = message.document
    data = await state.get_data()
    selected_doc = data.get('selected_doc')
    
    if not selected_doc:
        await message.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω.")
        await state.clear()
        return
    
    candidate_uuid = await get_candidate_uuid_by_chat_id(chat_id)
    if not candidate_uuid:
        await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
    
    try:
        minio_client = get_minio_client()
        file = await bot.get_file(document.file_id)
        file_bytes = await bot.download_file(file.file_path)
        
        if isinstance(file_bytes, io.BytesIO):
            file_bytes = file_bytes.getvalue()
        
        file_extension = document.file_name.split('.')[-1] if document.file_name else 'bin'
        s3_key = f"{candidate_uuid}/{selected_doc['id']}.{file_extension}"
        bucket_name = "candidates"
        
        if not minio_client.bucket_exists(bucket_name):
            minio_client.make_bucket(bucket_name)
        
        minio_client.put_object(
            bucket_name,
            s3_key,
            io.BytesIO(file_bytes),
            length=len(file_bytes),
            content_type=document.mime_type
        )
        
        if await update_document_status(selected_doc['id'], 3):
            await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            await state.clear()
            await cmd_docs(message, state)
        else:
            await message.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å.")
        
    except Exception as e:
        logger.error(f"Error uploading document: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        await state.clear()

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –ø—Ä–æ—Ñ–∏–ª—å, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ç.–¥.)
@dp.message(F.text == "üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π")
async def request_location(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    location_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–µ–π —Ç–µ–∫—É—â–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π:",
        reply_markup=location_kb
    )
    await state.set_state(AuthState.waiting_for_location)
    await save_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", False)

@dp.message(AuthState.waiting_for_location, F.location)
async def handle_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"""
    location = message.location
    chat_id = message.chat.id
    
    try:
        candidate_uuid = await get_candidate_uuid_by_chat_id(chat_id)
        if not candidate_uuid:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        success = await save_location(
            candidate_uuid=candidate_uuid,
            latitude=location.latitude,
            longitude=location.longitude,
            accuracy=location.horizontal_accuracy
        )
        
        if success:
            await message.answer(
                "‚úÖ –í–∞—à–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                reply_markup=await get_main_keyboard()
            )
            await save_message(
                chat_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é: {location.latitude}, {location.longitude}",
                True
            )
        else:
            await message.answer(
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.",
                reply_markup=await get_main_keyboard()
            )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error handling location: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.",
            reply_markup=await get_main_keyboard()
        )
        await state.clear()

@dp.message(F.text == "üó∫Ô∏è –ú–æ—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è")
async def show_my_location(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    
    try:
        candidate_uuid = await get_candidate_uuid_by_chat_id(chat_id)
        if not candidate_uuid:
            await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT latitude, longitude, accuracy, created_at
                    FROM hr.candidate_location
                    WHERE candidate_uuid = %s
                    ORDER BY created_at DESC
                    LIMIT 1
                """, (candidate_uuid,))
                
                location = cursor.fetchone()
                
                if not location:
                    await message.answer("–í—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")
                    return
                
                lat, lon, acc, created_at = location
                created_str = created_at.strftime("%d.%m.%Y %H:%M")
                
                response = (
                    "üó∫Ô∏è <b>–í–∞—à–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è</b>\n\n"
                    f"<b>–®–∏—Ä–æ—Ç–∞:</b> {lat}\n"
                    f"<b>–î–æ–ª–≥–æ—Ç–∞:</b> {lon}\n"
                    f"<b>–¢–æ—á–Ω–æ—Å—Ç—å:</b> {acc if acc else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} –º\n"
                    f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {created_str}"
                )
                
                await message.answer(response, parse_mode="HTML")
                await save_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", True)
                
    except Exception as e:
        logger.error(f"Error fetching location: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chat_id = message.chat.id
    
    if not await is_user_authorized(chat_id):
        await message.answer("üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
        return
    
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT c.first_name, c.middle_name, c.last_name, c.email, s.name as status
                    FROM hr.candidate c
                    JOIN hr.candidate_status s ON c.status_id = s.status_id
                    WHERE c.telegram_chat_id = %s
                """, (chat_id,))
                
                result = cursor.fetchone()
                if not result:
                    await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return
                
                first_name, middle_name, last_name, email, status = result
                response = (
                    "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                    f"<b>–§–ò–û:</b> {last_name} {first_name} {middle_name or ''}\n"
                    f"<b>Email:</b> {email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º."
                )
                
                profile_kb = ReplyKeyboardMarkup(
                    keyboard=[
                        [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
                        [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
                    ],
                    resize_keyboard=True
                )
                
                await message.answer(response, reply_markup=profile_kb, parse_mode="HTML")
                await save_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å", True)
                
    except Exception as e:
        logger.error(f"Error displaying profile: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.")

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    chat_id = message.chat.id
    await save_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞—Ç–∏–ª—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", False)
    
    support_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

    response = (
        "üÜò <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç!;))\n"
        "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
    )

    await message.answer(response, reply_markup=support_kb, parse_mode="HTML")
    await save_message(chat_id, "–ü–æ–∫–∞–∑–∞–Ω–æ –º–µ–Ω—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏", True)

@dp.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await show_main_menu(message)
    await save_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è –≤ –º–µ–Ω—é", False)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())