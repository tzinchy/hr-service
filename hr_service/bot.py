from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from candidate.database import get_connection
from core.config import settings
from datetime import datetime
import pandas as pd
import uuid
import os
import tempfile
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from candidate.tg_service import is_user_authorized, process_bank_statement, save_message, create_required_documents, get_candidate_uuid_by_chat_id
from candidate.database import get_minio_client
import io
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AuthState(StatesGroup):
    waiting_for_code = State()
    waiting_for_privacy_accept = State()
    document_upload = State()
    waiting_for_bank_data = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.bot.TELEGRAM_TOKEN)
dp = Dispatcher()

# –î–æ–±–∞–≤–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)



@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        "üîë –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, "
        "–∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ email:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AuthState.waiting_for_code)
    logger.info(f"User {message.chat.id} started the bot")

@dp.message(AuthState.waiting_for_code, F.text)
async def process_invitation_code(message: Message, state: FSMContext):
    code = message.text.strip().upper()
    chat_id = message.chat.id
    logger.info(f"Processing invitation code for user {chat_id}: {code}")

    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–æ–¥
                cursor.execute(
                    """
                    SELECT candidate_uuid, first_name, last_name, agreement_accepted 
                    FROM hr.candidate 
                    WHERE invitation_code = %s
                    """,
                    (code,)
                )
                
                result = cursor.fetchone()
                
                if not result:
                    await message.answer(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. "
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                    )
                    return
                
                candidate_uuid, first_name, last_name, agreement_accepted = result
                
                # –û–±–Ω–æ–≤–ª—è–µ–º telegram_chat_id
                cursor.execute(
                    """
                    UPDATE hr.candidate 
                    SET telegram_chat_id = %s
                    WHERE candidate_uuid = %s
                    """,
                    (chat_id, candidate_uuid)
                )
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ —á–∞—Ç–æ–≤
                cursor.execute("""
                    INSERT INTO comm.telegram_chat (
                        chat_id, 
                        candidate_uuid,
                        chat_type,
                        created_at,
                        updated_at
                    ) VALUES (%s, %s, %s, %s, %s)
                    ON CONFLICT (chat_id) DO UPDATE
                    SET candidate_uuid = EXCLUDED.candidate_uuid,
                        updated_at = EXCLUDED.updated_at
                """, (
                    chat_id,
                    candidate_uuid,
                    'private',
                    datetime.now(),
                    datetime.now()
                ))
                
                conn.commit()
                
                if agreement_accepted:
                    # –ï—Å–ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                    await create_required_documents(candidate_uuid)
                    await message.answer(
                        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name} {last_name}!\n"
                        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /docs –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏."
                    )
                    await state.clear()
                else:
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏
                    privacy_kb = InlineKeyboardMarkup(inline_keyboard=[
                        [
                            InlineKeyboardButton(
                                text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é",
                                callback_data="privacy_accept"
                            ),
                            InlineKeyboardButton(
                                text="‚ùå –û—Ç–∫–∞–∑—ã–≤–∞—é—Å—å",
                                callback_data="privacy_decline"
                            )
                        ]
                    ])
                    
                    await message.answer(
                        "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n"
                        "1. –ú—ã —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                        "2. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã\n"
                        "3. –ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º\n\n"
                        "–í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?",
                        reply_markup=privacy_kb
                    )
                    await state.set_state(AuthState.waiting_for_privacy_accept)
                    await state.update_data(candidate_uuid=candidate_uuid)
                
                await save_message(
                    chat_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è",
                    True
                )
    except Exception as e:
        logger.error(f"Error during invitation code processing: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.callback_query(AuthState.waiting_for_privacy_accept, F.data == "privacy_accept")
async def accept_privacy(callback: types.CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id
    data = await state.get_data()
    candidate_uuid = data['candidate_uuid']
    logger.info(f"User {chat_id} accepted privacy policy")
    
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    UPDATE hr.candidate 
                    SET agreement_accepted = TRUE,
                        agreement_accepted_at = NOW()
                    WHERE candidate_uuid = %s
                    RETURNING first_name, last_name
                """, (candidate_uuid,))
                
                result = cursor.fetchone()
                if not result:
                    await callback.message.answer("‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    await state.clear()
                    return
                    
                first_name, last_name = result
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç—Ä–µ–±—É–µ–º—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                await create_required_documents(candidate_uuid)
                
                conn.commit()
                
                await callback.message.edit_text(
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ, {first_name}! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n"
                    "- –ü–∞—Å–ø–æ—Ä—Ç\n"
                    "- –ò–ù–ù\n"
                    "- –°–ù–ò–õ–°\n"
                    "- –í—ã–ø–∏—Å–∫–∞ –±–∞–Ω–∫–∞ (Excel —Ñ–∞–π–ª)\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /docs –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
                )
                
                await save_message(
                    chat_id,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} –ø—Ä–∏–Ω—è–ª –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
                    True
                )
                
                await state.clear()
                
    except Exception as e:
        logger.error(f"Error during privacy acceptance: {e}")
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.callback_query(AuthState.waiting_for_privacy_accept, F.data == "privacy_decline")
async def decline_privacy(callback: types.CallbackQuery, state: FSMContext):
    logger.info(f"User {callback.message.chat.id} declined privacy policy")
    await callback.message.edit_text(
        "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. "
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è.\n\n"
        "–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )
    await state.clear()

@dp.message(Command("docs"))
async def cmd_docs(message: Message, state: FSMContext):
    chat_id = message.chat.id
    logger.info(f"User {chat_id} requested docs")
    
    if not await is_user_authorized(chat_id):
        await message.answer(
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è "
            "—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
        )
        return
    
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                # –ù–∞–π–¥–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                cursor.execute("""
                    SELECT c.candidate_uuid, c.first_name, c.last_name 
                    FROM hr.candidate c
                    WHERE c.telegram_chat_id = %s
                """, (chat_id,))
                
                candidate = cursor.fetchone()
                if not candidate:
                    await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                    return
                
                candidate_uuid, first_name, last_name = candidate
                
                # –ü–æ–ª—É—á–∏–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                cursor.execute("""
                    SELECT d.document_id, t.name, d.status_id, t.template_id
                    FROM hr.candidate_document d
                    JOIN hr.document_template t ON d.template_id = t.template_id
                    WHERE d.candidate_id = %s
                    ORDER BY t.order_position
                """, (candidate_uuid,))
                
                documents = cursor.fetchall()
                
                if not documents:
                    # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö
                    await create_required_documents(candidate_uuid)
                    
                    # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                    cursor.execute("""
                        SELECT d.document_id, t.name, d.status_id, t.template_id
                        FROM hr.candidate_document d
                        JOIN hr.document_template t ON d.template_id = t.template_id
                        WHERE d.candidate_id = %s
                        ORDER BY t.order_position
                    """, (candidate_uuid,))
                    
                    documents = cursor.fetchall()
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                keyboard = []
                for doc in documents:
                    doc_id, doc_name, status_id, template_id = doc
                    status = "‚úÖ" if status_id == 2 else "‚ùå"
                    keyboard.append([KeyboardButton(text=f"{status} {doc_name}")])
                
                keyboard.append([KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")])
                
                doc_kb = ReplyKeyboardMarkup(
                    keyboard=keyboard,
                    resize_keyboard=True
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                docs_info = {doc[1]: {"id": doc[0], "template_id": doc[3]} for doc in documents}
                await state.update_data(docs_info=docs_info)
                
                response = f"üìÇ {first_name}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:\n\n"
                for doc in documents:
                    doc_id, doc_name, status_id, _ = doc
                    status = "‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω" if status_id == 2 else "‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
                    response += f"- {doc_name}: {status}\n"
                
                await message.answer(response, reply_markup=doc_kb)
                await save_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", True)
    except Exception as e:
        logger.error(f"Error displaying documents: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(F.text.startswith(("‚úÖ ", "‚ùå ")))
async def handle_document_selection(message: Message, state: FSMContext):
    chat_id = message.chat.id
    
    if not await is_user_authorized(chat_id):
        await message.answer(
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è "
            "—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
        )
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞
    doc_name = message.text[2:].strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    docs_info = data.get('docs_info', {})
    
    if doc_name not in docs_info:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /docs")
        return
    
    doc_info = docs_info[doc_name]
    
    # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—ã–ø–∏—Å–∫–∏ –±–∞–Ω–∫–∞
    if doc_name == "–í—ã–ø–∏—Å–∫–∞ –±–∞–Ω–∫–∞":
        await message.answer(
            "üìä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –≤—ã–ø–∏—Å–∫–∞–º–∏ –±–∞–Ω–∫–∞.\n"
            "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:\n"
            "- bank (–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞)\n"
            "- account_number (–Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞)\n"
            "- open_date (–¥–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è)\n"
            "- close_date (–¥–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è)\n"
            "- account_type (—Ç–∏–ø —Å—á–µ—Ç–∞)\n"
            "- status (—Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞)"
        )
        await state.set_state(AuthState.waiting_for_bank_data)
        await state.update_data(selected_doc=doc_info)
        return
    
    await message.answer(
        f"üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_name}"
    )
    await state.set_state(AuthState.document_upload)
    await state.update_data(selected_doc=doc_info)

@dp.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message, state: FSMContext):
    await cmd_menu(message, state)

@dp.message(AuthState.waiting_for_bank_data, F.document)
async def handle_bank_statement(message: Message, state: FSMContext):
    chat_id = message.chat.id
    document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not document.file_name.endswith(('.xlsx', '.xls')):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)")
        return
    
    candidate_uuid = await get_candidate_uuid_by_chat_id(chat_id)
    if not candidate_uuid:
        await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await state.clear()
        return
    
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª —Å –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –≤—ã–ø–∏—Å–∫–∞–º–∏...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(document.file_id)
        file_path = os.path.join(tempfile.gettempdir(), document.file_name)
        await bot.download_file(file.file_path, file_path)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        success, message_text = await process_bank_statement(file_path, candidate_uuid)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(file_path)
        
        if success:
            await message.answer(f"‚úÖ {message_text}")
        else:
            await message.answer(f"‚ùå {message_text}")
        
        await state.clear()
        await cmd_docs(message, state)
    except Exception as e:
        logger.error(f"Error processing bank statement: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."
        )
        await state.clear()

@dp.message(AuthState.document_upload, F.document)
async def handle_document_upload(message: Message, state: FSMContext):
    chat_id = message.chat.id
    document = message.document
    data = await state.get_data()
    selected_doc = data.get('selected_doc')
    
    if not selected_doc:
        await message.answer("‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /docs")
        await state.clear()
        return
    
    candidate_uuid = await get_candidate_uuid_by_chat_id(chat_id)
    if not candidate_uuid:
        await message.answer("‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        await state.clear()
        return
    
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–æ–∫—É–º–µ–Ω—Ç...")
    
    try:
        minio_client = get_minio_client()
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
        file = await bot.get_file(document.file_id)
        file_bytes = await bot.download_file(file.file_path)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes –µ—Å–ª–∏ —ç—Ç–æ –µ—â–µ –Ω–µ bytes
        if isinstance(file_bytes, io.BytesIO):
            file_bytes = file_bytes.getvalue()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        file_extension = document.file_name.split('.')[-1] if document.file_name else 'bin'
        s3_key = f"{candidate_uuid}/{selected_doc['id']}.{file_extension}"
        bucket_name = "candidates"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∫–µ—Ç, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        if not minio_client.bucket_exists(bucket_name):
            minio_client.make_bucket(bucket_name)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ MinIO
        minio_client.put_object(
            bucket_name,
            s3_key,
            io.BytesIO(file_bytes),  # –û–±–µ—Ä—Ç—ã–≤–∞–µ–º –≤ BytesIO
            length=len(file_bytes),
            content_type=document.mime_type
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    UPDATE hr.candidate_document
                    SET status_id = 2,
                        s3_bucket = %s,
                        s3_key = %s,
                        file_size = %s,
                        content_type = %s,
                        submitted_at = NOW(),
                        updated_at = NOW()
                    WHERE document_id = %s
                """, (
                    bucket_name,
                    s3_key,
                    document.file_size,
                    document.mime_type,
                    selected_doc['id']
                ))
                
                cursor.execute("""
                    INSERT INTO hr.document_history (document_uuid, status_id, created_at)
                    VALUES (%s, 2, NOW())
                """, (selected_doc['id'],))
                
                conn.commit()
        
        await message.answer("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        await state.clear()
        await cmd_docs(message, state)
        
    except Exception as e:
        logger.error(f"MinIO error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
    except Exception as e:
        logger.error(f"Error uploading document: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
        await state.clear()

@dp.message(Command("menu"))
async def cmd_menu(message: Message, state: FSMContext):
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    chat_id = message.chat.id
    
    if not await is_user_authorized(chat_id):
        await message.answer(
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è "
            "—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
    menu_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÅ –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã")],
            [KeyboardButton(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=menu_kb
    )
    
    await save_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é", False)

@dp.message(F.text == "üìÅ –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
async def my_documents(message: Message, state: FSMContext):
    await cmd_docs(message, state)

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def my_profile(message: Message):
    chat_id = message.chat.id
    
    if not await is_user_authorized(chat_id):
        await message.answer(
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è "
            "—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
        )
        return
    
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT c.first_name, c.middle_name, c.last_name, c.email, s.name as status
                    FROM hr.candidate c
                    JOIN hr.candidate_status s ON c.status_id = s.status_id
                    WHERE c.telegram_chat_id = %s
                """, (chat_id,))
                
                result = cursor.fetchone()
                if not result:
                    await message.answer("‚ö†–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            first_name, middle_name, last_name, email, status = result
            response = (
                f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                f"<b>–§–ò–û:</b> {last_name} {first_name} {middle_name or ''}\n"
                f"<b>Email:</b> {email or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º."
            )
            
            profile_kb = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
                    [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
            
            await message.answer(response, reply_markup=profile_kb, parse_mode="HTML")
            await save_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ—Ñ–∏–ª—å", True)
                
    except Exception as e:
        logger.error(f"Error displaying profile: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    chat_id = message.chat.id

    if not await is_user_authorized(chat_id):
        await message.answer(
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è "
            "—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
        )
        return

    support_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")],
            [KeyboardButton(text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

    response = (
        "üÜò <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –ü–æ–∑–≤–æ–Ω–∏—Ç—å –Ω–∞–º: +7 (123) 456-78-90\n"
        "- –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —á–∞—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
    )

    await message.answer(response, reply_markup=support_kb, parse_mode="HTML")
    await save_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞—Ç–∏–ª—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", True)

@dp.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu_handler(message: Message, state: FSMContext):
    await cmd_menu(message, state)

@dp.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def edit_profile(message: Message, state: FSMContext):
    chat_id = message.chat.id
    if not await is_user_authorized(chat_id):
        await message.answer(
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è "
            "—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø—Ä–∏–º–∏—Ç–µ –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
        )
        return

    edit_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=edit_kb,
        parse_mode="HTML"
    )
    await save_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", True)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())