from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardRemove
from candidate.database import get_connection
from core.config import settings
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AuthState(StatesGroup):
    waiting_for_code = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.bot.TELEGRAM_TOKEN)
dp = Dispatcher()

async def is_user_authorized(chat_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT 1 FROM hr.candidate WHERE telegram_chat_id = %s",
                (chat_id,)
            )
            return bool(cursor.fetchone())

async def save_message(chat_id: int, text: str, is_from_admin: bool = False):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞"""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            try:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_chat
                cursor.execute("""
                    INSERT INTO comm.telegram_chat (
                        chat_id, 
                        chat_type,
                        created_at,
                        updated_at
                    ) VALUES (%s, %s, %s, %s)
                    ON CONFLICT (chat_id) DO NOTHING
                """, (
                    chat_id,
                    'private',
                    datetime.now(),
                    datetime.now()
                ))
                
                # –ó–∞—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                cursor.execute("""
                    INSERT INTO comm.message (
                        chat_id, 
                        content, 
                        sender_type, 
                        sent_at, 
                        is_from_admin
                    ) VALUES (%s, %s, %s, %s, %s)
                """, (
                    chat_id,
                    text,
                    'admin' if is_from_admin else 'candidate',
                    datetime.now(),
                    is_from_admin
                ))
                conn.commit()
            except Exception as e:
                conn.rollback()
                raise e

# –ö–æ–º–∞–Ω–¥–∞ /start - –¥–æ—Å—Ç—É–ø–Ω–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        "üîë –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, "
        "–∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ email:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AuthState.waiting_for_code)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@dp.message(AuthState.waiting_for_code, F.text)
async def process_invitation_code(message: Message, state: FSMContext):
    code = message.text.strip().upper()
    chat_id = message.chat.id

    with get_connection() as conn:
        with conn.cursor() as cursor:
            try:
                cursor.execute(
                    """
                    UPDATE hr.candidate 
                    SET telegram_chat_id = %s
                    WHERE invitation_code = %s
                    RETURNING first_name, last_name, candidate_uuid
                    """,
                    (chat_id, code)
                )
                
                if result := cursor.fetchone():
                    first_name, last_name, candidate_uuid = result
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ telegram_chat —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É
                    cursor.execute("""
                        INSERT INTO comm.telegram_chat (
                            chat_id, 
                            candidate_uuid,
                            chat_type,
                            created_at,
                            updated_at
                        ) VALUES (%s, %s, %s, %s, %s)
                        ON CONFLICT (chat_id) DO UPDATE
                        SET candidate_uuid = EXCLUDED.candidate_uuid
                    """, (
                        chat_id,
                        candidate_uuid,
                        'private',
                        datetime.now(),
                        datetime.now()
                    ))
                    
                    conn.commit()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await save_message(
                        chat_id,
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è",
                        True
                    )
                    
                    await message.answer(
                        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name} {last_name}!\n"
                        "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ.\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π."
                    )
                    await state.clear()
                else:
                    await message.answer(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ "
                        "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
                        "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
                    )
                    
            except Exception as e:
                conn.rollback()
                await message.answer(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
@dp.message(F.text)
async def handle_text_messages(message: Message):
    chat_id = message.chat.id
    
    if not await is_user_authorized(chat_id):
        await message.answer(
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è "
            "—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_message(chat_id, message.text, False)
    

# –ö–æ–º–∞–Ω–¥–∞ /menu (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö)
@dp.message(Command("menu"))
async def cmd_menu(message: Message):
    chat_id = message.chat.id
    
    if not await is_user_authorized(chat_id):
        await message.answer(
            "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è "
            "—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /start"
        )
        return
    
    await save_message(chat_id, "/menu command", False)
    
    response = (
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n"
        "- /docs - –ú–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        "- /profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "- /support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
    )
    await save_message(chat_id, response, True)
    await message.answer(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())