import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from candidate.database import get_connection
from core.config import settings
from aiogram import Bot
import asyncio
import logging
from frontend_auth.auth import check_auth, login, logout, admin_required, hr_admin_required, hr_user_required, test_requiered
from candidate.tg_service import save_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
POLLING_INTERVAL = 3  # —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
MESSAGE_PREVIEW_LENGTH = 50  # –¥–ª–∏–Ω–∞ –ø—Ä–µ–≤—å—é —Å–æ–æ–±—â–µ–Ω–∏—è

# --- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ---

def get_all_chats_cached():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤"""
    return get_all_chats()

def get_all_chats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT 
                        c.candidate_uuid::text,
                        c.first_name,
                        c.last_name,
                        c.telegram_chat_id::bigint,
                        cs.name as status,
                        m.content as last_message,
                        m.sent_at as last_message_time,
                        m.is_from_admin as is_last_from_admin,
                        EXISTS (
                            SELECT 1 FROM comm.message 
                            WHERE chat_id = c.telegram_chat_id 
                            AND NOT is_from_admin 
                            AND sent_at > COALESCE(
                                (SELECT last_read FROM comm.chat_status 
                                 WHERE chat_id = c.telegram_chat_id), 
                                '1970-01-01'::timestamp
                            )
                        ) as has_unread
                    FROM hr.candidate c
                    JOIN hr.candidate_status cs ON c.status_id = cs.status_id
                    LEFT JOIN comm.telegram_chat tc ON tc.chat_id = c.telegram_chat_id
                    LEFT JOIN LATERAL (
                        SELECT content, sent_at, is_from_admin 
                        FROM comm.message 
                        WHERE chat_id = c.telegram_chat_id 
                        ORDER BY sent_at DESC 
                        LIMIT 1
                    ) m ON true
                    WHERE c.telegram_chat_id IS NOT NULL
                    ORDER BY m.sent_at DESC NULLS LAST
                """)
                columns = [desc[0] for desc in cursor.description]
                return pd.DataFrame(cursor.fetchall(), columns=columns)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
        return pd.DataFrame()

@st.cache_data(ttl=1)
def get_chat_history_cached(chat_id: int):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
    return get_chat_history(chat_id)

def get_chat_history(chat_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º"""
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —á–∞—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                cursor.execute("""
                    INSERT INTO comm.telegram_chat (chat_id, chat_type)
                    VALUES (%s, 'candidate')
                    ON CONFLICT (chat_id) DO NOTHING
                """, (int(chat_id),))
                
                # –û–±–Ω–æ–≤–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—á—Ç–µ–Ω–∏—è
                cursor.execute("""
                    INSERT INTO comm.chat_status (chat_id, last_read)
                    VALUES (%s, NOW())
                    ON CONFLICT (chat_id) DO UPDATE 
                    SET last_read = EXCLUDED.last_read
                """, (int(chat_id),))
                
                # –ü–æ–ª—É—á–∏–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                cursor.execute("""
                    SELECT 
                        content,
                        sent_at,
                        is_from_admin
                    FROM comm.message
                    WHERE chat_id = %s
                    ORDER BY sent_at
                """, (int(chat_id),))
                messages = cursor.fetchall()
                conn.commit()
                return messages
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
        return []

def send_telegram_message(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ aiogram"""
    async def async_send():
        bot = Bot(token=settings.bot.TELEGRAM_TOKEN)
        try:
            await bot.send_message(chat_id=int(chat_id), text=text)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            raise
        finally:
            await bot.session.close()
    
    asyncio.run(async_send())

def save_message(chat_id: int, text: str, is_from_admin: bool):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    INSERT INTO comm.message (
                        chat_id, content, sender_type, sent_at, is_from_admin
                    ) VALUES (%s, %s, %s, %s, %s)
                """, (
                    int(chat_id),
                    text,
                    'admin' if is_from_admin else 'candidate',
                    datetime.now(),
                    is_from_admin
                ))
                conn.commit()
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise

def check_new_messages(chat_id: int, last_check: datetime):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø–æ–ª–ª–∏–Ω–≥ –ë–î"""
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT EXISTS (
                        SELECT 1 FROM comm.message 
                        WHERE chat_id = %s 
                        AND NOT is_from_admin 
                        AND sent_at > %s
                    )
                """, (chat_id, last_check))
                return cursor.fetchone()[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        return False

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---

def display_chat_preview(candidate):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–≤—å—é —á–∞—Ç–∞ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º"""
    col1, col2 = st.columns([1, 4])
    with col1:
        st.markdown(f"**{candidate['first_name']} {candidate['last_name']}**")
        if candidate['has_unread']:
            st.markdown("<span style='color: red; font-weight: bold;'>‚óè</span>", unsafe_allow_html=True)
    
    with col2:
        if pd.isna(candidate['last_message']):
            preview = "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
        else:
            preview = candidate['last_message'][:MESSAGE_PREVIEW_LENGTH] 
            if len(candidate['last_message']) > MESSAGE_PREVIEW_LENGTH:
                preview += "..."
            
            if candidate['is_last_from_admin']:
                preview = f"–í—ã: {preview}"
            else:
                preview = f"{candidate['first_name']}: {preview}"
        
        st.markdown(preview)

def display_chat_messages(messages, candidate_name):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not messages:
        st.info("–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥!")
        return
    
    for msg in messages:
        content, sent_at, is_from_admin = msg
        timestamp = sent_at.strftime('%d.%m %H:%M')
        
        if is_from_admin:
            st.chat_message("human", avatar="üë®‚Äçüíº").markdown(
                f"**–í—ã** ({timestamp}):\n{content}"
            )
        else:
            st.chat_message("user", avatar="üë§").markdown(
                f"**{candidate_name}** ({timestamp}):\n{content}"
            )

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    if 'selected_chat' not in st.session_state:
        st.session_state.selected_chat = None
    if 'candidate_name' not in st.session_state:
        st.session_state.candidate_name = ""
    if 'last_update' not in st.session_state:
        st.session_state.last_update = datetime.now()
    if 'last_message_check' not in st.session_state:
        st.session_state.last_message_check = datetime.now()

@admin_required  # –¢—Ä–µ–±—É–µ–º –ø—Ä–∞–≤–∞ HR –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç–∞–º
def main():
    st.set_page_config(page_title="–ß–∞—Ç —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏", layout="wide")
    st.title("üí¨ –ß–∞—Ç —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –≤ —Å–∞–π–¥–±–∞—Ä
    with st.sidebar:
        if st.button("–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"):
            logout()
    
    initialize_session_state()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤..."):
        chats_df = get_all_chats_cached()
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([1, 3])

    with col1:
        st.subheader("–í—Å–µ —á–∞—Ç—ã")
        
        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
        search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", key="search_input")
        if search_query:
            chats_df = chats_df[
                chats_df['first_name'].str.contains(search_query, case=False) | 
                chats_df['last_name'].str.contains(search_query, case=False)
            ]
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        if not chats_df.empty:
            for _, candidate in chats_df.iterrows():
                if st.button(
                    f"{candidate['first_name']} {candidate['last_name']}",
                    key=f"chat_{candidate['telegram_chat_id']}",
                    use_container_width=True
                ):
                    st.session_state.selected_chat = candidate['telegram_chat_id']
                    st.session_state.candidate_name = f"{candidate['first_name']} {candidate['last_name']}"
                    st.session_state.last_update = datetime.now()
                    st.rerun()
                
                display_chat_preview(candidate)
                st.divider()
        else:
            st.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")

    with col2:
        if not st.session_state.selected_chat:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç —Å–ª–µ–≤–∞")
            return
        
        st.subheader(f"–ß–∞—Ç —Å {st.session_state.candidate_name}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if (datetime.now() - st.session_state.last_message_check).seconds > POLLING_INTERVAL:
            if check_new_messages(st.session_state.selected_chat, st.session_state.last_update):
                st.session_state.last_update = datetime.now()
                st.rerun()
            st.session_state.last_message_check = datetime.now()
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–∞
        chat_container = st.container(height=500, border=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        with chat_container:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π..."):
                messages = get_chat_history_cached(st.session_state.selected_chat)
                display_chat_messages(messages, st.session_state.candidate_name.split()[0])
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_message = st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", key="message_input")
        if new_message:
            try:
                with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è..."):
                    send_telegram_message(st.session_state.selected_chat, new_message)
                    save_message(st.session_state.selected_chat, new_message, True)
                    st.session_state.last_update = datetime.now()
                    st.rerun()
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–ª–≥–æ–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏
    if (datetime.now() - st.session_state.last_update).seconds > 30:
        st.session_state.last_update = datetime.now()
        st.rerun()

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
    if not check_auth():
        login()
    else:
        main()