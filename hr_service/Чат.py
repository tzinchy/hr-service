import streamlit as st
import pandas as pd
from datetime import datetime
import logging
from frontend_auth.auth import check_auth, login, logout, admin_required
from core.config import MESSAGE_PREVIEW_LENGTH, CHATS_PER_PAGE
from service.gemini_service import generate_expert_response
from repository.strml_repository import get_all_chats, get_chat_history, save_message
from service.bot_service import send_telegram_message
from repository.database import get_connection

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MESSAGES_PER_LOAD = 20
MESSAGE_PREVIEW_LENGTH = 50

def get_chat_history_with_offset(chat_id: int, offset: int = 0, limit: int = MESSAGES_PER_LOAD):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π offset"""
    try:
        with get_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute("""
                    SELECT 
                        content,
                        sent_at,
                        is_from_admin
                    FROM comm.message
                    WHERE chat_id = %s
                    ORDER BY sent_at DESC
                    LIMIT %s OFFSET %s
                """, (chat_id, limit, offset))
                return cursor.fetchall()
    except Exception as e:
        logger.error(f"Error getting chat history: {e}")
        return []

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
def display_chat_preview(candidate):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–≤—å—é —á–∞—Ç–∞ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º"""
    col1, col2 = st.columns([1, 4])
    with col1:
        st.markdown(f"**{candidate['first_name']} {candidate['last_name']}**")
        if candidate["has_unread"]:
            st.markdown(
                "<span style='color: red; font-weight: bold;'>‚óè</span>",
                unsafe_allow_html=True,
            )

    with col2:
        if pd.isna(candidate["last_message"]):
            preview = "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
        else:
            preview = candidate["last_message"][:MESSAGE_PREVIEW_LENGTH]
            if len(candidate["last_message"]) > MESSAGE_PREVIEW_LENGTH:
                preview += "..."

            if candidate["is_last_from_admin"]:
                preview = f"–í—ã: {preview}"
            else:
                preview = f"{candidate['first_name']}: {preview}"

        st.markdown(preview)

def display_chat_messages(messages, candidate_name):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not messages:
        st.info("–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥!")
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–Ω–æ–≤—ã–µ –≤–Ω–∏–∑—É)
    for msg in reversed(messages):
        content, sent_at, is_from_admin = msg
        timestamp = sent_at.strftime("%d.%m %H:%M")

        if is_from_admin:
            st.chat_message("human", avatar="üë®‚Äçüíº").markdown(
                f"**–í—ã** ({timestamp}):\n{content}"
            )
        else:
            st.chat_message("user", avatar="üë§").markdown(
                f"**{candidate_name}** ({timestamp}):\n{content}"
            )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if len(messages) >= MESSAGES_PER_LOAD:
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"):
            st.session_state.messages_offset += MESSAGES_PER_LOAD
            st.session_state.needs_rerun = True

def initialize_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
    if "selected_chat" not in st.session_state:
        st.session_state.selected_chat = None
    if "candidate_name" not in st.session_state:
        st.session_state.candidate_name = ""
    if "last_update" not in st.session_state:
        st.session_state.last_update = datetime.now()
    if "show_ai_assistant" not in st.session_state:
        st.session_state.show_ai_assistant = False
    if "messages_offset" not in st.session_state:
        st.session_state.messages_offset = 0
    if "needs_rerun" not in st.session_state:
        st.session_state.needs_rerun = False

@admin_required
def main():
    st.set_page_config(page_title="–ß–∞—Ç —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏", layout="wide")
    st.title("üí¨ –ß–∞—Ç —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏")

    with st.sidebar:
        if st.button("–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"):
            logout()

    initialize_session_state()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤..."):
        chats_df = get_all_chats()

    # –†–∞–∑–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([1, 3])

    with col1:
        st.subheader("–í—Å–µ —á–∞—Ç—ã")

        # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
        search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", key="search_input")
        if search_query:
            chats_df = chats_df[
                chats_df["first_name"].str.contains(search_query, case=False)
                | chats_df["last_name"].str.contains(search_query, case=False)
            ]

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
        if not chats_df.empty:
            for _, candidate in chats_df.iterrows():
                if st.button(
                    f"{candidate['first_name']} {candidate['last_name']}",
                    key=f"chat_{candidate['telegram_chat_id']}",
                    use_container_width=True,
                ):
                    st.session_state.selected_chat = candidate["telegram_chat_id"]
                    st.session_state.candidate_name = (
                        f"{candidate['first_name']} {candidate['last_name']}"
                    )
                    st.session_state.messages_offset = 0
                    st.session_state.last_update = datetime.now()
                    st.session_state.needs_rerun = True

                display_chat_preview(candidate)
                st.divider()
        else:
            st.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤")

    with col2:
        if not st.session_state.selected_chat:
            st.info("–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç —Å–ª–µ–≤–∞")
            return

        st.subheader(f"–ß–∞—Ç —Å {st.session_state.candidate_name}")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç"):
            st.session_state.last_update = datetime.now()
            st.session_state.needs_rerun = True

        if st.button(
            "ü§ñ AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", help="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ Gemini"
        ):
            st.session_state.show_ai_assistant = not st.session_state.show_ai_assistant
            st.session_state.needs_rerun = True

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–∞
        chat_container = st.container(height=500, border=True)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        with chat_container:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π..."):
                messages = get_chat_history_with_offset(
                    st.session_state.selected_chat,
                    offset=st.session_state.messages_offset
                )
                display_chat_messages(
                    messages, st.session_state.candidate_name.split()[0]
                )

        # –ë–ª–æ–∫ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        if st.session_state.show_ai_assistant:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            last_candidate_message = next(
                (msg[0] for msg in reversed(messages) if not msg[2]), None
            )

            if last_candidate_message:
                with st.expander("üîç AI –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", expanded=True):
                    st.write("**–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:**")
                    st.info(last_candidate_message)

                    if st.button(
                        "üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç", key="generate_response"
                    ):
                        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞..."):
                            expert_response = generate_expert_response(
                                last_candidate_message, messages
                            )
                            st.session_state.generated_response = expert_response

                    if "generated_response" in st.session_state:
                        response = st.text_area(
                            "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç:",
                            value=st.session_state.generated_response,
                            height=200,
                        )

                        if st.button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç"):
                            try:
                                with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è..."):
                                    send_telegram_message(
                                        st.session_state.selected_chat,
                                        st.session_state.generated_response,
                                    )
                                    save_message(
                                        st.session_state.selected_chat,
                                        st.session_state.generated_response,
                                        True,
                                    )
                                    st.session_state.last_update = datetime.now()
                                    st.session_state.show_ai_assistant = False
                                    st.session_state.needs_rerun = True
                            except Exception as e:
                                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                st.warning("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if new_message := st.chat_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", key="message_input"):
            try:
                with st.spinner("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è..."):
                    send_telegram_message(st.session_state.selected_chat, new_message)
                    save_message(st.session_state.selected_chat, new_message, True)
                    st.session_state.last_update = datetime.now()
                    st.session_state.needs_rerun = True
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if st.session_state.needs_rerun:
        st.session_state.needs_rerun = False
        st.rerun()

if __name__ == "__main__":
    #if not check_auth():
        #login()
    #else:
    main()