import streamlit as st 
import pandas as pd 
from repository.database import get_connection
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
import smtplib
from core.config import settings
import logging
from io import BytesIO

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def send_email_with_attachment(to_email: str, subject: str, message: str, attachment=None, filename=None):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º"""
    try:
        msg = MIMEMultipart()
        msg["From"] = settings.email_settings.EMAIL_LOGIN
        msg["To"] = to_email
        msg["Subject"] = subject
        msg.attach(MIMEText(message, "plain"))

        if attachment is not None:
            part = MIMEApplication(attachment.read(), Name=filename)
            part['Content-Disposition'] = f'attachment; filename="{filename}"'
            msg.attach(part)

        with smtplib.SMTP(
            settings.email_settings.EMAIL_SERVER, 
            settings.email_settings.EMAIL_PORT
        ) as server:
            server.starttls()
            server.login(
                settings.email_settings.EMAIL_LOGIN,
                settings.email_settings.EMAIL_PASSWORD,
            )
            server.send_message(msg)

        logger.info(f"Email —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {to_email}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}")
        return False

def render_archived_candidates_page():
    st.title("üìÅ –ê—Ä—Ö–∏–≤–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = pd.read_sql("""
        SELECT 
            candidate_uuid,
            first_name || ' ' || last_name AS full_name,
            email,
            status_id,
            archived_at,
            notes
        FROM hr.candidate_archive
        ORDER BY archived_at DESC
    """, get_connection())

    if df.empty:
        st.info("–ù–µ—Ç –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        return

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([3, 2])

    with col1:
        st.subheader("–°–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        st.dataframe(
            df[["full_name", "email", "archived_at"]],
            column_config={
                "full_name": "–§–ò–û",
                "email": "Email",
                "archived_at": "–î–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"
            },
            hide_index=True,
            use_container_width=True
        )

    with col2:
        st.subheader("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –í—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        selected_candidate = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:",
            options=df["email"],
            format_func=lambda x: df[df["email"] == x]["full_name"].values[0]
        )
        
        if selected_candidate:
            candidate_data = df[df["email"] == selected_candidate].iloc[0]
            
            # –§–æ—Ä–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            with st.form(key='email_form'):
                st.markdown(f"**–ö–∞–Ω–¥–∏–¥–∞—Ç:** {candidate_data['full_name']}")
                st.markdown(f"**Email:** {candidate_data['email']}")
                
                subject = st.text_input("–¢–µ–º–∞ –ø–∏—Å—å–º–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏")
                message = st.text_area("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", height=200)
                
                # –ü–æ–ª–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
                uploaded_file = st.file_uploader(
                    "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", 
                    type=["pdf", "docx", "xlsx", "jpg", "png"],
                    accept_multiple_files=False
                )
                
                submit_button = st.form_submit_button("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
                if submit_button:
                    if uploaded_file:
                        # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ BytesIO
                        file_bytes = BytesIO(uploaded_file.getvalue())
                        
                        if send_email_with_attachment(
                            to_email=candidate_data['email'],
                            subject=subject,
                            message=message,
                            attachment=file_bytes,
                            filename=uploaded_file.name
                        ):
                            st.success(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º '{uploaded_file.name}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º")
                    else:
                        if send_email_with_attachment(
                            to_email=candidate_data['email'],
                            subject=subject,
                            message=message
                        ):
                            st.success("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")