import streamlit as st
import pandas as pd
import plotly.express as px
import pydeck as pdk
from datetime import datetime, timedelta
from repository.dashboard_repository import (
    get_df_locations,
    get_pending_docs,
    get_documents_by_type,
    get_documents_by_type_by_status,
    get_employees_by_department,
    get_candidates_by_status,
    get_document_processing_times
)
from frontend_auth.auth import check_auth, login, admin_required

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
@st.cache_data(ttl=3600, show_spinner="–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏—è—Ö...")
def get_cached_locations():
    df = get_df_locations()
    return df.rename(columns={
        'name': '–§–ò–û',
        'email': 'Email',
        'type': '–¢–∏–ø',
        'work_type_display': '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'
    })

@st.cache_data(ttl=600, show_spinner="–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏...")
def get_cached_pending_docs():
    df = get_pending_docs()
    return df.rename(columns={
        'candidate_employee': '–ö–∞–Ω–¥–∏–¥–∞—Ç/–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
        'doc_type': '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        'submitted_at': '–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏',
        'status': '–°—Ç–∞—Ç—É—Å',
        'last_updated': '–û–±–Ω–æ–≤–ª–µ–Ω–æ'
    })

@st.cache_data(ttl=600, show_spinner="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º...")
def get_cached_documents_by_type():
    df = get_documents_by_type()
    return df.rename(columns={
        'doc_type': '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
    })

@st.cache_data(ttl=600, show_spinner="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
def get_cached_documents_by_status():
    df = get_documents_by_type_by_status()
    return df.rename(columns={
        'status': '–°—Ç–∞—Ç—É—Å',
        'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
    })

@st.cache_data(ttl=600, show_spinner="–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º...")
def get_cached_employees_by_dept():
    df = get_employees_by_department()
    return df.rename(columns={
        'department': '–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç',
        'count': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'
    })

@st.cache_data(ttl=600, show_spinner="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
def get_cached_candidates_by_status():
    df = get_candidates_by_status()
    return df.rename(columns={
        'status': '–°—Ç–∞—Ç—É—Å',
        'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
    })

@st.cache_data(ttl=600, show_spinner="–í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
def get_cached_doc_processing_times():
    df = get_document_processing_times()
    return df.rename(columns={
        'doc_type': '–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞',
        'avg_days': '–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ (–¥–Ω–∏)'
    })

def setup_sidebar_filters():
    st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")
    
    date_range = st.sidebar.date_input(
        "–ü–µ—Ä–∏–æ–¥",
        value=[datetime.now() - timedelta(days=30), datetime.now()],
        max_value=datetime.now()
    )
    
    work_type_filter = st.sidebar.selectbox(
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã",
        options=["–í—Å–µ", "–£–¥–∞–ª–µ–Ω–Ω–æ", "–û—Ñ–∏—Å", "–ì–∏–±—Ä–∏–¥"],
        index=0
    )

    return date_range, work_type_filter

def create_color_mapping(row):
    """–°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –¥–ª—è –∫–∞—Ä—Ç—ã"""
    if row['–¢–∏–ø'] == 'candidate':
        return [255, 0, 0, 200]  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    elif row['work_type_id'] in [3, 4]:  # –û—Ñ–∏—Å
        return [0, 100, 255, 200]  # –°–∏–Ω–∏–π –¥–ª—è –æ—Ñ–∏—Å–∞
    elif row['work_type_id'] in [5, 6]:  # –ì–∏–±—Ä–∏–¥
        return [50, 200, 100, 200]  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≥–∏–±—Ä–∏–¥–∞
    else:  # –£–¥–∞–ª–µ–Ω–∫–∞
        return [255, 165, 0, 200]  # –û—Ä–∞–Ω–∂–µ–≤—ã–π

@admin_required
def render_locations_tab(work_type_filter):
    try:
        st.header("üìç –ö–∞—Ä—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df_locations = get_cached_locations()
        if df_locations.empty:
            st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        required_cols = ['–¢–∏–ø', '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', 'latitude', 'longitude', '–§–ò–û']
        if not all(col in df_locations.columns for col in required_cols):
            st.error("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–∞—Ä—Ç—ã")
            return

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        work_type_groups = {
            "–£–¥–∞–ª–µ–Ω–Ω–æ": ['–£–¥–∞–ª—ë–Ω–Ω–æ (8:00-17:00)', '–£–¥–∞–ª—ë–Ω–Ω–æ (9:00-18:00)'],
            "–û—Ñ–∏—Å": ['–í –æ—Ñ–∏—Å–µ (–ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏)'],
            "–ì–∏–±—Ä–∏–¥": ['–ì–∏–±—Ä–∏–¥ (–ø–Ω, –ø—Ç - –æ—Ñ–∏—Å)']
        }
        
        if work_type_filter != "–í—Å–µ":
            df_locations = df_locations[
                (df_locations['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'].isin(work_type_groups[work_type_filter])) |
                (df_locations['–¢–∏–ø'] == 'candidate')
            ]

        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: –æ–±—ã—á–Ω—ã–µ —Ç–æ—á–∫–∏ –∏ –ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏
        df_city = df_locations[df_locations['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'] == '–í –æ—Ñ–∏—Å–µ (–ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏)']
        df_others = df_locations[df_locations['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã'] != '–í –æ—Ñ–∏—Å–µ (–ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏)']
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        def get_color(row):
            if row['–¢–∏–ø'] == 'candidate':
                return [255, 0, 0, 180]  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            elif '–ì–∏–±—Ä–∏–¥' in row['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã']:
                return [50, 200, 100, 180]  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –≥–∏–±—Ä–∏–¥–∞
            elif '–£–¥–∞–ª—ë–Ω–Ω–æ' in row['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã']:
                return [255, 165, 0, 180]  # –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∫–∏
            return [128, 128, 128, 180]  # –°–µ—Ä—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        df_others['color'] = df_others.apply(get_color, axis=1)
        df_others = df_others.dropna(subset=['latitude', 'longitude'])
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞—Ä—Ç—ã
        df_others['tooltip'] = df_others.apply(
            lambda row: f"""
            <div style="padding: 8px; font-family: Arial; max-width: 250px;">
                <h4 style="margin: 0; color: {'#ff0000' if row['–¢–∏–ø'] == 'candidate' else '#0066cc'}">
                    {row['–§–ò–û']}
                </h4>
                <p style="margin: 5px 0;">
                    <b>–¢–∏–ø:</b> {'–ö–∞–Ω–¥–∏–¥–∞—Ç' if row['–¢–∏–ø'] == 'candidate' else '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'}<br>
                    <b>–†–µ–∂–∏–º:</b> {row['–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã']}<br>
                    <b>Email:</b> {row.get('Email', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
                </p>
            </div>
            """,
            axis=1
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã
        view_state = pdk.ViewState(
            latitude=55.751244,
            longitude=37.618423,
            zoom=12,
            pitch=60,
            bearing=0
        )
        
        # –°–ª–æ–∏ –¥–ª—è –∫–∞—Ä—Ç—ã
        layers = [
            # –°–ª–æ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ—á–µ–∫
            pdk.Layer(
                "ScatterplotLayer",
                data=df_others,
                get_position=["longitude", "latitude"],
                get_color="color",
                get_radius=150,
                pickable=True,
                auto_highlight=True,
                highlight_color=[255, 255, 0, 200],
                radius_min_pixels=5,
                radius_max_pixels=20
            ),
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–ª–æ–π –¥–ª—è –ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏ (3D –±–∞—à–µ–Ω–∫–∏)
            pdk.Layer(
                "ColumnLayer",
                data=df_city,
                get_position=["longitude", "latitude"],
                get_elevation=50,
                get_fill_color=[0, 80, 255, 200],
                radius=50,
                pickable=True,
                auto_highlight=True,
                elevation_scale=10,
                extruded=True
            )
        ]
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
        st.pydeck_chart(pdk.Deck(
            map_style="mapbox://styles/mapbox/light-v9",
            initial_view_state=view_state,
            layers=layers,
            tooltip={
                "html": "{tooltip}",
                "style": {
                    "backgroundColor": "#1e1e1e",
                    "color": "white",
                    "borderRadius": "5px",
                    "boxShadow": "0 2px 8px rgba(0,0,0,0.3)"
                }
            }
        ))
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ª–µ–≥–µ–Ω–¥–∞
        with st.expander("–ü–æ—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã", expanded=True):
            st.markdown("""
            <style>
                .legend {
                    background: rgba(255,255,255,0.9);
                    padding: 10px;
                    border-radius: 5px;
                    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                }
                .legend-item {
                    display: flex;
                    align-items: center;
                    margin: 8px 0;
                }
                .legend-icon {
                    width: 20px;
                    height: 20px;
                    margin-right: 10px;
                    border-radius: 3px;
                }
                .legend-3d {
                    width: 20px;
                    height: 20px;
                    margin-right: 10px;
                    background: linear-gradient(to top, #0050ff, #00a2ff);
                    transform: perspective(20px) rotateX(20deg);
                }
            </style>
            
            <div class="legend">
                <div class="legend-item">
                    <div class="legend-icon" style="background-color: rgb(255, 0, 0);"></div>
                    <span>–ö–∞–Ω–¥–∏–¥–∞—Ç—ã</span>
                </div>
                <div class="legend-item">
                    <div class="legend-3d"></div>
                    <span>–û—Ñ–∏—Å –ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏</span>
                </div>
                <div class="legend-item">
                    <div class="legend-icon" style="background-color: rgb(50, 200, 100);"></div>
                    <span>–ì–∏–±—Ä–∏–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫</span>
                </div>
                <div class="legend-item">
                    <div class="legend-icon" style="background-color: rgb(255, 165, 0);"></div>
                    <span>–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</span>
                </div>
            </div>
            """, unsafe_allow_html=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö
        col1, col2, col3 = st.columns(3)
        col1.metric("–í—Å–µ–≥–æ", len(df_locations))
        col2.metric("–ù–∞ –∫–∞—Ä—Ç–µ", len(df_others) + len(df_city))
        col3.metric("–í –ú–æ—Å–∫–≤–∞-–°–∏—Ç–∏", len(df_city))
        
        st.subheader("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(
            df_locations[['–§–ò–û', '–¢–∏–ø', '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã', 'Email']],
            height=400,
            use_container_width=True,
            hide_index=True
        )
        
    except Exception as e:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã")
        st.error(f"–î–µ—Ç–∞–ª–∏: {str(e)}")

@admin_required
def render_analytics_tab():
    try:
        st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        col1, col2 = st.columns(2)
        
        with col1:
            df_dept = get_cached_employees_by_dept()
            if not df_dept.empty:
                fig = px.pie(
                    df_dept,
                    values='–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
                    names='–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç',
                    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º',
                    hole=0.3
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞–º")
        
        with col2:
            df_status = get_cached_candidates_by_status()
            if not df_status.empty:
                fig = px.bar(
                    df_status,
                    x='–°—Ç–∞—Ç—É—Å',
                    y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    title='–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º',
                    color='–°—Ç–∞—Ç—É—Å',
                    text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö")
        
        st.divider()
        
        df_doc_times = get_cached_doc_processing_times()
        if not df_doc_times.empty:
            fig = px.bar(
                df_doc_times,
                x='–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                y='–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ (–¥–Ω–∏)',
                title='–°—Ä–µ–¥–Ω–∏–µ —Å—Ä–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
                color='–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                text='–°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫ (–¥–Ω–∏)'
            )
            fig.update_traces(texttemplate='%{text:.1f} –¥–Ω.', textposition='outside')
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ä–æ–∫–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")

@admin_required
def render_documents_tab():
    try:
        st.header("üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç")
        
        col1, col2 = st.columns(2)
        
        with col1:
            df_doc_status = get_cached_documents_by_status()
            if not df_doc_status.empty:
                fig = px.pie(
                    df_doc_status,
                    values='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    names='–°—Ç–∞—Ç—É—Å',
                    title='–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º',
                    color='–°—Ç–∞—Ç—É—Å',
                    color_discrete_map={
                        '–ü—Ä–∏–Ω—è—Ç': '#2ca02c',
                        '–û—Ç–∫–ª–æ–Ω–µ–Ω': '#d62728',
                        '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏': '#ff7f0e',
                        '–ó–∞–∫–∞–∑–∞–Ω': '#1f77b4',
                        '–ù–µ –ø—Ä–∏–Ω—è—Ç': '#7f7f7f'
                    },
                    hole=0.3
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        with col2:
            df_doc_type = get_cached_documents_by_type()
            if not df_doc_type.empty:
                fig = px.bar(
                    df_doc_type,
                    x='–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                    y='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
                    title='–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º',
                    color='–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞',
                    text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
                )
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–∏–ø–∞—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        st.divider()
        
        st.subheader("–î–æ–∫—É–º–µ–Ω—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
        df_pending_docs = get_cached_pending_docs()
        if not df_pending_docs.empty:
            st.dataframe(
                df_pending_docs,
                column_config={
                    "–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏": st.column_config.DatetimeColumn(format="DD.MM.YYYY"),
                    "–û–±–Ω–æ–≤–ª–µ–Ω–æ": st.column_config.DatetimeColumn(format="DD.MM.YYYY HH:mm")
                },
                hide_index=True,
                use_container_width=True
            )
        else:
            st.success("–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")

def dash():
    if not check_auth():
        login()
        return
    
    st.title("üìä HR –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    st.caption("–ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–¥—Ä–æ–≤—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    date_range, work_type_filter = setup_sidebar_filters()
    
    tab1, tab2, tab3 = st.tabs([
        "üìç –õ–æ–∫–∞—Ü–∏–∏", 
        "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã"
    ])
    
    with tab1:
        render_locations_tab(work_type_filter)
    
    with tab2:
        render_analytics_tab()
    
    with tab3:
        render_documents_tab()

if __name__ == "__main__":
    dash()