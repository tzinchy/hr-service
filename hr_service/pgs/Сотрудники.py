from repository.database import get_connection
import streamlit as st 
import pandas as pd 

def render_employees_page():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∫–æ–Ω–∫–æ–π
    st.markdown("""
    <style>
        .header {
            font-size: 24px !important;
            font-weight: bold;
            margin-bottom: 20px;
        }
        .card {
            padding: 15px;
            border-radius: 10px;
            border: 1px solid #e1e4e8;
            margin-bottom: 20px;
        }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown('<div class="header">üìã –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</div>', unsafe_allow_html=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    conn = get_connection()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    df = pd.read_sql("""
        SELECT 
            u.user_uuid,
            u.first_name || ' ' || u.last_name AS full_name,
            u.email,
            wt.work_type || ' (' || wt.work_range || ')' AS work_schedule,
            wt.notes
        FROM auth."user" u
        LEFT JOIN auth.work_type wt ON u.work_type_id = wt.work_type_id
        ORDER BY u.last_name, u.first_name
    """, conn)

    if df.empty:
        st.info("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    col1, col2 = st.columns([1, 2])

    with col1:
        st.subheader("–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")
        
        # –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        st.dataframe(
            df[["full_name", "email", "work_schedule"]],
            column_config={
                "full_name": "–§–ò–û",
                "email": "Email",
                "work_schedule": "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"
            },
            hide_index=True,
            use_container_width=True,
            height=600
        )

    with col2:
        st.subheader("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã")
        
        # –í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        selected_user = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
            options=df["email"],
            format_func=lambda x: df[df["email"] == x]["full_name"].values[0],
            key="user_select"
        )
        
        if selected_user:
            user_data = df[df["email"] == selected_user].iloc[0]
            
            # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            st.markdown(f"""
            <div class="card">
                <h3>{user_data['full_name']}</h3>
                <p><strong>Email:</strong> {user_data['email']}</p>
                <p><strong>–¢–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫:</strong> {user_data['work_schedule']}</p>
                {f"<p><strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> {user_data['notes']}</p>" if user_data['notes'] else ""}
            </div>
            """, unsafe_allow_html=True)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã work_type
            work_types = pd.read_sql("""
                SELECT work_type_id, work_type || ' | ' || work_range AS label 
                FROM auth.work_type 
                ORDER BY work_type_id
            """, conn)
            
            # –§–æ—Ä–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            with st.form(key='change_work_type'):
                new_schedule = st.selectbox(
                    "–ù–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:",
                    options=work_types['label'],
                    index=0,
                    key="schedule_select"
                )
                
                submit_button = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
                
                if submit_button:
                    new_id = work_types[work_types['label'] == new_schedule]['work_type_id'].values[0]
                    with conn.cursor() as cur:
                        cur.execute(
                            "UPDATE auth.user SET work_type_id = %s WHERE user_uuid = %s", 
                            (new_id, user_data['user_uuid'])
                        )
                        conn.commit()
                    
                    st.success("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    st.rerun()