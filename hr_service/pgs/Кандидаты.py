import streamlit as st
import pandas as pd
import textwrap
import logging
import google.generativeai as genai
from repository.database import get_connection, get_minio_client
from frontend_auth.auth import check_auth, get_current_user_data, login
from service.email_service import send_email, send_telegram_notification, send_invitation_email
from repository.strml_repository import add_candidate_to_db
from core.config import GEMINI_API_KEY

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
ADMIN_ROLE_ID = 1 

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
DOCUMENT_STATUSES = {
    1: ("–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω", "‚ùå", "#FF5252"),
    2: ("–ó–∞–∫–∞–∑–∞–Ω", "üõí", "#FFD740"),
    3: ("–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏", "‚è≥", "#64B5F6"),
    4: ("–ü—Ä–æ–≤–µ—Ä–µ–Ω", "‚úÖ", "#4CAF50"),
    5: ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ", "üîÑ", "#FF9800")
}

CANDIDATE_STATUSES = {
    2: ("–ü—Ä–∏–≥–ª–∞—à–µ–Ω", "‚úâÔ∏è"),
    3: ("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "üìù"),
    5: ("–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ", "üîç"),
    7: ("–ü—Ä–∏–Ω—è—Ç", "‚úÖ"),
    8: ("–û—Ç–∫–ª–æ–Ω–µ–Ω", "‚ùå")
}

FINAL_STATUSES = [7, 8]  # –°—Ç–∞—Ç—É—Å—ã, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã

ALLOWED_DOCUMENT_STATUS_CHANGES = {
    3: [4, 5]
}

ALLOWED_CANDIDATE_STATUS_CHANGES = {
    5: [7, 8]  # –ò–∑ "–î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ" –º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ "–ü—Ä–∏–Ω—è—Ç" –∏–ª–∏ "–û—Ç–∫–ª–æ–Ω–µ–Ω"
}

STATUS_DESCRIPTIONS = {
    7: "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –æ—Ç–±–æ—Ä –∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –Ω–∞—à—É –∫–æ–º–∞–Ω–¥—É.",
    8: "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ."
}

CANDIDATE_ANALYSIS_PROMPT = "–í—ã - HR-—ç–∫—Å–ø–µ—Ä—Ç. –ö—Ä–∞—Ç–∫–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞."

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI ---
genai.configure(api_key=GEMINI_API_KEY)
ai_model = genai.GenerativeModel("gemini-1.5-flash")

# --- –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def get_candidate_statuses():
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT status_id, name FROM hr.candidate_status ORDER BY status_id")
            return cursor.fetchall()

def get_candidates_list(tutor_uuid, is_admin, status_filter=None, search_query=None):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            params = []
            
            base_select = """
                SELECT 
                    c.candidate_uuid, c.first_name, c.last_name, c.email,
                    cs.status_id, cs.name as status, c.notes as candidate_notes,
                    COUNT(d.document_id) as total_docs
                FROM hr.candidate c
                JOIN hr.candidate_status cs ON c.status_id = cs.status_id
                LEFT JOIN hr.candidate_document d ON c.candidate_uuid = d.candidate_id
                WHERE 1=1
            """

            if not is_admin:
                base_select += " AND c.tutor_uuid = %s"
                params.append(tutor_uuid)

            if status_filter:
                base_select += " AND cs.status_id = %s"
                params.append(status_filter)

            if search_query:
                base_select += " AND (LOWER(c.first_name) LIKE %s OR LOWER(c.last_name) LIKE %s)"
                params.extend([f"%{search_query.lower()}%", f"%{search_query.lower()}%"])
            
            base_select += """
                GROUP BY c.candidate_uuid, c.first_name, c.last_name, c.email, cs.status_id, cs.name, c.notes
                ORDER BY c.last_name, c.first_name
            """

            cursor.execute(base_select, params)
            return pd.DataFrame(cursor.fetchall(), columns=[desc[0] for desc in cursor.description])

def get_candidate_details(candidate_uuid):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT 
                    c.*, 
                    cs.name as status_name,
                    u.first_name as tutor_first_name,
                    u.last_name as tutor_last_name
                FROM hr.candidate c
                JOIN hr.candidate_status cs ON c.status_id = cs.status_id
                LEFT JOIN auth.user u ON c.tutor_uuid = u.user_uuid
                WHERE c.candidate_uuid = %s
            """, (candidate_uuid,))
            
            columns = [desc[0] for desc in cursor.description]
            row = cursor.fetchone()
            
            if row:
                return dict(zip(columns, row))
            return None

def get_candidate_documents(candidate_uuid):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT 
                    d.document_id, t.name as document_type, d.s3_bucket, d.s3_key,
                    d.file_size, d.content_type, d.submitted_at, d.status_id, d.notes as document_notes
                FROM hr.candidate_document d
                JOIN hr.document_template t ON d.template_id = t.template_id
                WHERE d.candidate_id = %s
                ORDER BY t.order_position
            """, (candidate_uuid,))
            return pd.DataFrame(cursor.fetchall(), columns=[desc[0] for desc in cursor.description])

def update_document_status(document_id, new_status_id):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                UPDATE hr.candidate_document SET status_id = %s WHERE document_id = %s
            """, (new_status_id, document_id))
            conn.commit()

def update_candidate_status(candidate_uuid, new_status_id):
    """–û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    with get_connection() as conn:
        with conn.cursor() as cursor:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            cursor.execute("""
                SELECT first_name, last_name, email, status_id, telegram_chat_id
                FROM hr.candidate 
                WHERE candidate_uuid = %s
            """, (candidate_uuid,))
            candidate_data = cursor.fetchone()
            
            if not candidate_data:
                raise ValueError("–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            current_status = candidate_data[3]
            if current_status in FINAL_STATUSES:
                raise ValueError("–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            cursor.execute("""
                UPDATE hr.candidate SET status_id = %s WHERE candidate_uuid = %s
            """, (new_status_id, candidate_uuid))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
            if new_status_id in FINAL_STATUSES:
                send_status_notifications(
                    first_name=candidate_data[0],
                    last_name=candidate_data[1],
                    email=candidate_data[2],
                    telegram_chat_id=candidate_data[4],
                    status_id=new_status_id
                )
            
            conn.commit()

def send_status_notifications(first_name, last_name, email, telegram_chat_id, status_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É –∏ –≤ Telegram"""
    status_name, status_icon = CANDIDATE_STATUSES[status_id]
    status_desc = STATUS_DESCRIPTIONS[status_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"""
    –£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {first_name} {last_name},
    
    –í–∞—à —Å—Ç–∞—Ç—É—Å –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_icon} {status_name}
    
    {status_desc}
    """
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É
    try:
        send_email(
            to_email=email,
            subject=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: {status_name}",
            message=message
        )
        logger.info(f"Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {email}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {str(e)}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    if telegram_chat_id:
        try:
            send_telegram_notification(
                chat_id=telegram_chat_id,
                message=message
            )
            logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è chat_id {telegram_chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {str(e)}")

def update_candidate_notes(candidate_uuid, notes):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                UPDATE hr.candidate SET notes = %s WHERE candidate_uuid = %s
            """, (notes, candidate_uuid))
            conn.commit()

def update_document_notes(document_id, notes):
    with get_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("""
                UPDATE hr.candidate_document SET notes = %s WHERE document_id = %s
            """, (notes, document_id))
            conn.commit()

def download_from_minio(bucket, key):
    try:
        if not bucket or not key:
            return None
        minio_client = get_minio_client()
        response = minio_client.get_object(bucket, key)
        file_data = response.read()
        response.close()
        return file_data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return None

# --- AI –§—É–Ω–∫—Ü–∏–∏ ---
def generate_compact_analysis(candidate, documents):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI
    
    Args:
        candidate (dict): –î–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        documents (DataFrame): –î–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
    Returns:
        str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        status_info = CANDIDATE_STATUSES.get(candidate['status_id'], ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "‚ùì"))
        status_name = status_info[0]
        status_icon = status_info[1]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        docs_summary = {
            "completed": len(documents[documents['status_id'] == 4]),
            "pending_review": len(documents[documents['status_id'] == 3]),
            "needs_resubmit": len(documents[documents['status_id'] == 5]),
            "ordered": len(documents[documents['status_id'] == 2]),
            "missing": len(documents[documents['status_id'] == 1])
        }
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
        prompt = f"""
        –¢—ã - HR-–∞–Ω–∞–ª–∏—Ç–∏–∫ –≤ –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç.
        
        ### –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
        - –ö–∞–Ω–¥–∏–¥–∞—Ç: {candidate['first_name']} {candidate['last_name']}
        - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_icon} {status_name}
        - –ö–æ–Ω—Ç–∞–∫—Ç—ã: {candidate.get('email', '–Ω–µ—Ç email')} | {candidate.get('phone', '–Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')}
        - –ö—É—Ä–∞—Ç–æ—Ä: {candidate.get('tutor_first_name', '')} {candidate.get('tutor_last_name', '')}
        - –ó–∞–º–µ—Ç–∫–∏: {textwrap.shorten(candidate.get('notes', '–Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫'), width=150, placeholder='...')}
        
        ### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:
        - ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –æ–¥–æ–±—Ä–µ–Ω–æ: {docs_summary['completed']}
        - üîç –û–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {docs_summary['pending_review']}
        - üîÑ –¢—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {docs_summary['needs_resubmit']}
        - üõí –ó–∞–∫–∞–∑–∞–Ω—ã: {docs_summary['ordered']}
        - ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {docs_summary['missing']}
        - üìã –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}
        
        ### –ó–∞–¥–∞–Ω–∏–µ:
        1. –û—Ü–µ–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        2. –í—ã–¥–µ–ª–∏—Ç–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
        3. –î–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
        4. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
        5. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
        
        –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
        [–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞] [–ü—Ä–æ–±–ª–µ–º—ã] [–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏]
        """
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = ai_model.generate_content(prompt)
        return response.text
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤—Ä—É—á–Ω—É—é."

# --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ---
def show_status_badge(status_id):
    status = DOCUMENT_STATUSES.get(status_id, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "‚ùì", "#9E9E9E"))
    st.markdown(
        f'<div style="background-color:{status[2]}20; border-radius:6px; padding:4px 8px; '
        f'display:inline-flex; align-items:center; border-left:3px solid {status[2]}; margin:2px;">'
        f'<div style="font-size:14px;">{status[1]} {status[0]}</div></div>',
        unsafe_allow_html=True
    )

def show_candidate_status_badge(status_id):
    """
    –ö—Ä–∞—Å–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å –∏–∫–æ–Ω–∫–æ–π –∏ —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
    
    Args:
        status_id (int): ID —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    """
    # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    STATUS_COLORS = {
        2: ("#2196F3", "#E3F2FD"),  # –ü—Ä–∏–≥–ª–∞—à–µ–Ω (—Å–∏–Ω–∏–π)
        3: ("#4CAF50", "#E8F5E9"),  # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (–∑–µ–ª–µ–Ω—ã–π)
        5: ("#FF9800", "#FFF3E0"),  # –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ (–æ—Ä–∞–Ω–∂–µ–≤—ã–π)
        7: ("#2E7D32", "#E8F5E9"),  # –ü—Ä–∏–Ω—è—Ç (—Ç–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π)
        8: ("#D32F2F", "#FFEBEE")   # –û—Ç–∫–ª–æ–Ω–µ–Ω (–∫—Ä–∞—Å–Ω—ã–π)
    }
    
    status = CANDIDATE_STATUSES.get(status_id, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "‚ùì"))
    color, bg_color = STATUS_COLORS.get(status_id, ("#9E9E9E", "#FAFAFA"))
    
    st.markdown(
        f"""
        <div style="
            background-color: {bg_color};
            color: {color};
            border-radius: 12px;
            padding: 10px 15px;
            border-left: 5px solid {color};
            display: inline-flex;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin: 5px 0;
            font-size: 16px;
            font-weight: 600;
        ">
            <span style="font-size: 20px; margin-right: 10px;">{status[1]}</span>
            <span>{status[0]}</span>
        </div>
        """,
        unsafe_allow_html=True
    )

def show_document_card(doc, is_admin=False):
    with st.container(border=True):
        cols = st.columns([1, 3])
        
        with cols[0]:
            show_status_badge(doc['status_id'])
            
        with cols[1]:
            st.markdown(f"**{doc['document_type']}**")
            st.caption(f"üóìÔ∏è {doc.get('submitted_at', '–Ω–µ—Ç –¥–∞—Ç—ã')} | üì¶ {doc.get('file_size', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            
            # –ó–∞–º–µ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
            doc_notes = st.text_area(
                "–ó–∞–º–µ—Ç–∫–∏",
                value=doc.get('document_notes', ''),
                height=70,
                key=f"doc_notes_{doc['document_id']}",
                label_visibility="collapsed"
            )
            
            # –î–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
            action_cols = st.columns([1, 1, 2])
            
            with action_cols[0]:
                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
                if doc['status_id'] not in [1, 2] and doc['s3_key']:
                    if st.button(
                        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å",
                        key=f"dl_{doc['document_id']}",
                        use_container_width=True
                    ):
                        file_data = download_from_minio(doc['s3_bucket'], doc['s3_key'])
                        if file_data:
                            st.download_button(
                                "–°–∫–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å",
                                file_data,
                                doc['s3_key'].split('/')[-1],
                                doc['content_type'],
                                key=f"dl_btn_{doc['document_id']}"
                            )
            
            with action_cols[1]:
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
                if doc['status_id'] in ALLOWED_DOCUMENT_STATUS_CHANGES and is_admin:
                    new_status = st.selectbox(
                        "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        [DOCUMENT_STATUSES[s][0] for s in ALLOWED_DOCUMENT_STATUS_CHANGES[doc['status_id']]],
                        key=f"status_{doc['document_id']}",
                        label_visibility="collapsed"
                    )
            
            with action_cols[2]:
                if st.button(
                    "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                    key=f"save_doc_{doc['document_id']}",
                    use_container_width=True
                ):
                    if doc['status_id'] in ALLOWED_DOCUMENT_STATUS_CHANGES and is_admin:
                        new_id = next(k for k, v in DOCUMENT_STATUSES.items() if v[0] == new_status)
                        update_document_status(doc['document_id'], new_id)
                    update_document_notes(doc['document_id'], doc_notes)
                    st.rerun()

def show_candidate_details_view(candidate_uuid):
    candidate = get_candidate_details(candidate_uuid)
    documents = get_candidate_documents(candidate_uuid)
    
    user_data = get_current_user_data()
    is_admin = user_data and 1 in user_data.get('roles_ids', [])
    
    # –•–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if st.button("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"):
        if 'selected_candidate' in st.session_state:
            del st.session_state['selected_candidate']
        st.rerun()
    
    st.markdown(f"# {candidate['first_name']} {candidate['last_name']}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
    with st.container(border=True):
        cols = st.columns([1, 1, 2])
        
        with cols[0]:
            st.markdown("### –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.markdown(f"üìß **Email:** {candidate['email']}")
            st.markdown(f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {candidate.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
            st.markdown(f"üë§ **–ö—É—Ä–∞—Ç–æ—Ä:** {candidate.get('tutor_first_name', '')} {candidate.get('tutor_last_name', '')}")
        
        with cols[1]:
            st.markdown("### –°—Ç–∞—Ç—É—Å")
            show_candidate_status_badge(candidate['status_id'])
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            if is_admin and candidate['status_id'] in ALLOWED_CANDIDATE_STATUS_CHANGES:
                new_status_name = st.selectbox(
                    "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞",
                    [CANDIDATE_STATUSES[s][0] for s in ALLOWED_CANDIDATE_STATUS_CHANGES[candidate['status_id']]],
                    key=f"candidate_status_{candidate['candidate_uuid']}"
                )
                
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key=f"apply_status_{candidate['candidate_uuid']}"):
                    try:
                        new_status_id = [k for k, v in CANDIDATE_STATUSES.items() if v[0] == new_status_name][0]
                        update_candidate_status(candidate['candidate_uuid'], new_status_id)
                        st.success("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
                        st.rerun()
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        
        with cols[2]:
            st.markdown("### –ó–∞–º–µ—Ç–∫–∏")
            notes = st.text_area(
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ",
                value=candidate.get('notes', ''),
                height=100,
                key=f"candidate_notes_{candidate['candidate_uuid']}"
            )
            
            if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏", key=f"save_notes_{candidate['candidate_uuid']}"):
                update_candidate_notes(candidate['candidate_uuid'], notes)
                st.rerun()
    
    # AI –∞–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    with st.expander("üîç AI –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", expanded=False):
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞..."):
            analysis = generate_compact_analysis(candidate, documents)
            st.markdown(analysis)
    
    # –î–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    st.markdown("## üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    with st.expander("üîç –§–∏–ª—å—Ç—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", expanded=False):
        cols = st.columns(2)
        with cols[0]:
            search_query = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        with cols[1]:
            status_filter = st.selectbox(
                "–°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–∞", 
                ["–í—Å–µ"] + [s[0] for s in DOCUMENT_STATUSES.values()]
            )
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if search_query:
        documents = documents[documents['document_type'].str.contains(search_query, case=False)]
    if status_filter != "–í—Å–µ":
        status_id = next(k for k, v in DOCUMENT_STATUSES.items() if v[0] == status_filter)
        documents = documents[documents['status_id'] == status_id]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    cols = st.columns(len(DOCUMENT_STATUSES))
    for idx, (status_id, (name, icon, color)) in enumerate(DOCUMENT_STATUSES.items()):
        with cols[idx]:
            count = len(documents[documents['status_id'] == status_id])
            st.markdown(
                f'<div style="background-color:{color}20; border-radius:6px; padding:6px; '
                f'text-align:center; border-left:3px solid {color}; margin:2px;">'
                f'<div style="font-size:14px;">{icon} {count}</div>'
                f'<div style="font-size:11px;">{name}</div></div>',
                unsafe_allow_html=True
            )
    
    # –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    st.markdown("### –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    for _, doc in documents.iterrows():
        show_document_card(doc, is_admin)

# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤) ---
def show_candidates_list():
    st.title("üë• –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", use_container_width=True):
        st.session_state['show_add_form'] = True
    
    if st.session_state.get('show_add_form', False):
        with st.form("add_form"):
            st.subheader("–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç")
            
            cols = st.columns(2)
            with cols[0]:
                first_name = st.text_input("–ò–º—è*")
            with cols[1]:
                last_name = st.text_input("–§–∞–º–∏–ª–∏—è*")
            
            email = st.text_input("Email*")
            sex = st.selectbox("–ü–æ–ª", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"])
            notes = st.text_area("–ó–∞–º–µ—Ç–∫–∏")
            
            cols = st.columns(2)
            with cols[0]:
                if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å", type="primary"):
                    if not first_name or not last_name or not email:
                        st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")
                    else:
                        try:
                            user_data = get_current_user_data()
                            candidate_uuid, code = add_candidate_to_db(
                                first_name=first_name,
                                last_name=last_name,
                                email=email,
                                sex=sex == "–ú—É–∂—Å–∫–æ–π",
                                tutor_id=user_data['user_uuid'],
                                notes=notes
                            )
                            send_invitation_email(email, code)
                            st.success("–ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω!")
                            st.session_state['show_add_form'] = False
                            st.rerun()
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
            
            with cols[1]:
                if st.form_submit_button("–û—Ç–º–µ–Ω–∞"):
                    st.session_state['show_add_form'] = False
                    st.rerun()
        return
    
    # –§–∏–ª—å—Ç—Ä—ã
    with st.expander("üîç –§–∏–ª—å—Ç—Ä—ã", expanded=True):
        cols = st.columns(2)
        with cols[0]:
            search = st.text_input("–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏")
        with cols[1]:
            status = st.selectbox(
                "–°—Ç–∞—Ç—É—Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞", 
                ["–í—Å–µ"] + [s for s in get_candidate_statuses()],
                format_func=lambda x: x[1] if x != "–í—Å–µ" else x
            )
    
    user_data = get_current_user_data()
    is_admin = ADMIN_ROLE_ID in user_data.get('roles_ids', [])
    tutor_uuid = user_data.get('user_uuid') if not is_admin else None
    
    # –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    candidates = get_candidates_list(
        tutor_uuid=tutor_uuid,
        is_admin=is_admin,
        status_filter=status[0] if status != "–í—Å–µ" else None,
        search_query=search if search else None
    )

    if candidates.empty:
        st.info("–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    for _, candidate in candidates.iterrows():
        with st.container(border=True):
            cols = st.columns([1, 3, 1])
            
            with cols[0]:
                status_name, status_icon = CANDIDATE_STATUSES.get(candidate['status_id'], ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "‚ùì"))
                st.markdown(f"### {status_icon}")
            
            with cols[1]:
                st.markdown(f"**{candidate['last_name']} {candidate['first_name']}**")
                st.caption(f"üìß {candidate['email']}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                if candidate['total_docs'] > 0:
                    doc_cols = st.columns(len(DOCUMENT_STATUSES))
                    for idx, (status_id, (_, icon, color)) in enumerate(DOCUMENT_STATUSES.items()):
                        with doc_cols[idx]:
                            count = candidate.get(f"status_{status_id}", 0)
                            if count > 0:
                                st.markdown(
                                    f'<div style="color:{color}; text-align:center;">{icon} {count}</div>',
                                    unsafe_allow_html=True
                                )
            
            with cols[2]:
                if st.button(
                    "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                    key=f"open_{candidate['candidate_uuid']}",
                    use_container_width=True
                ):
                    st.session_state['selected_candidate'] = candidate['candidate_uuid']
                    st.rerun()

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
def candidates():
    if not check_auth():
        login()
        return
    
    user_data = get_current_user_data()
    if not user_data:
        st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    if not set(user_data.get('roles_ids', [])).intersection({1, 2, 3}):
        st.error("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        return
    
    if 'selected_candidate' in st.session_state:
        show_candidate_details_view(st.session_state['selected_candidate'])
    else:
        show_candidates_list()

